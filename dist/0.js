webpackJsonp([0],[,,,,,,,,,,,,,,,,,function(e,r,s){function t(e){return s(n(e))}function n(e){var r=a[e];if(!(r+1))throw new Error("Cannot find module '"+e+"'.");return r}var a={"./en-us/apis/Enumerable.json":60,"./en-us/apis/Enumerable/meta.json":61,"./en-us/apis/Enumerable/methods/asEnumerable.json":62,"./en-us/apis/Enumerable/methods/empty.json":63,"./en-us/apis/Enumerable/properties/actions.json":64,"./en-us/apis/Enumerable/properties/comparers.json":65,"./en-us/apis/Enumerable/properties/config.json":66,"./en-us/apis/Enumerable/properties/predicates.json":67,"./en-us/apis/Enumerable/properties/selectors.json":68,"./en-us/caption.json":69,"./en-us/change.json":70,"./en-us/directory.json":71,"./en-us/directory.meta.json":72,"./en-us/guides/action.json":73,"./en-us/install.json":74,"./en-us/introduction.json":75,"./en-us/meta.json":76,"./examples/IEnumerable.json":77,"./examples/IEnumerable/methods/aggregate.json":78,"./examples/config.json":79,"./examples/instance.json":80,"./lang.json":14,"./versions.json":15,"./zh-cn/about.json":81,"./zh-cn/apis/Directory.json":82,"./zh-cn/apis/Directory/meta.json":83,"./zh-cn/apis/Directory/methods/delete.json":84,"./zh-cn/apis/Directory/methods/get.json":85,"./zh-cn/apis/Directory/methods/has.json":86,"./zh-cn/apis/Directory/methods/set.json":87,"./zh-cn/apis/Entry.json":88,"./zh-cn/apis/Entry/meta.json":89,"./zh-cn/apis/Entry/properties/key.json":90,"./zh-cn/apis/Entry/properties/value.json":91,"./zh-cn/apis/Enumerable.actions.json":92,"./zh-cn/apis/Enumerable.actions/meta.json":93,"./zh-cn/apis/Enumerable.actions/properties/default.json":94,"./zh-cn/apis/Enumerable.comparers.json":95,"./zh-cn/apis/Enumerable.comparers/meta.json":96,"./zh-cn/apis/Enumerable.comparers/methods/array.json":97,"./zh-cn/apis/Enumerable.comparers/methods/greater.json":98,"./zh-cn/apis/Enumerable.comparers/methods/less.json":99,"./zh-cn/apis/Enumerable.comparers/methods/predicate.json":100,"./zh-cn/apis/Enumerable.comparers/properties/default.json":101,"./zh-cn/apis/Enumerable.comparers/properties/equality.json":102,"./zh-cn/apis/Enumerable.comparers/properties/same.json":103,"./zh-cn/apis/Enumerable.comparers/properties/strict.json":104,"./zh-cn/apis/Enumerable.config.json":105,"./zh-cn/apis/Enumerable.config/meta.json":106,"./zh-cn/apis/Enumerable.config/properties/as.json":107,"./zh-cn/apis/Enumerable.config/properties/extends.array.json":108,"./zh-cn/apis/Enumerable.config/properties/extends.object.json":109,"./zh-cn/apis/Enumerable.config/properties/extends.string.json":110,"./zh-cn/apis/Enumerable.json":111,"./zh-cn/apis/Enumerable.predicates.json":112,"./zh-cn/apis/Enumerable.predicates/meta.json":113,"./zh-cn/apis/Enumerable.predicates/methods/equality.json":114,"./zh-cn/apis/Enumerable.predicates/methods/not.json":115,"./zh-cn/apis/Enumerable.predicates/methods/properties.json":116,"./zh-cn/apis/Enumerable.predicates/methods/regexp.json":117,"./zh-cn/apis/Enumerable.predicates/methods/same.json":118,"./zh-cn/apis/Enumerable.predicates/methods/selector.json":119,"./zh-cn/apis/Enumerable.predicates/methods/strict.json":120,"./zh-cn/apis/Enumerable.predicates/properties/default.json":121,"./zh-cn/apis/Enumerable.predicates/properties/exists.json":122,"./zh-cn/apis/Enumerable.selectors.json":123,"./zh-cn/apis/Enumerable.selectors/meta.json":124,"./zh-cn/apis/Enumerable.selectors/methods/property.json":125,"./zh-cn/apis/Enumerable.selectors/properties/default.json":126,"./zh-cn/apis/Enumerable.selectors/properties/key.json":127,"./zh-cn/apis/Enumerable.selectors/properties/result.json":128,"./zh-cn/apis/Enumerable.selectors/properties/value.json":129,"./zh-cn/apis/Enumerable/meta.json":130,"./zh-cn/apis/Enumerable/methods/asEnumerable.json":131,"./zh-cn/apis/Enumerable/methods/empty.json":132,"./zh-cn/apis/Enumerable/methods/range.json":133,"./zh-cn/apis/Enumerable/methods/repeat.json":134,"./zh-cn/apis/Enumerable/properties/actions.json":135,"./zh-cn/apis/Enumerable/properties/comparers.json":136,"./zh-cn/apis/Enumerable/properties/config.json":137,"./zh-cn/apis/Enumerable/properties/predicates.json":138,"./zh-cn/apis/Enumerable/properties/selectors.json":139,"./zh-cn/apis/IEnumerable.json":140,"./zh-cn/apis/IEnumerable/meta.json":141,"./zh-cn/apis/IEnumerable/methods/aggregate.json":142,"./zh-cn/apis/IEnumerable/methods/all.json":143,"./zh-cn/apis/IEnumerable/methods/any.json":144,"./zh-cn/apis/IEnumerable/methods/asEnumerable.json":145,"./zh-cn/apis/IEnumerable/methods/average.json":146,"./zh-cn/apis/IEnumerable/methods/concat.json":147,"./zh-cn/apis/IEnumerable/methods/contains.json":148,"./zh-cn/apis/IEnumerable/methods/copyWithin.json":149,"./zh-cn/apis/IEnumerable/methods/count.json":150,"./zh-cn/apis/IEnumerable/methods/defaultIfEmpty.json":151,"./zh-cn/apis/IEnumerable/methods/distinct.json":152,"./zh-cn/apis/IEnumerable/methods/elementAt.json":153,"./zh-cn/apis/IEnumerable/methods/elementAtOrDefault.json":154,"./zh-cn/apis/IEnumerable/methods/every.json":155,"./zh-cn/apis/IEnumerable/methods/except.json":156,"./zh-cn/apis/IEnumerable/methods/fill.json":157,"./zh-cn/apis/IEnumerable/methods/filter.json":158,"./zh-cn/apis/IEnumerable/methods/find.json":159,"./zh-cn/apis/IEnumerable/methods/findIndex.json":160,"./zh-cn/apis/IEnumerable/methods/findLast.json":161,"./zh-cn/apis/IEnumerable/methods/findLastIndex.json":162,"./zh-cn/apis/IEnumerable/methods/first.json":163,"./zh-cn/apis/IEnumerable/methods/firstOrDefault.json":164,"./zh-cn/apis/IEnumerable/methods/forEach.json":165,"./zh-cn/apis/IEnumerable/methods/getEnumerator.json":166,"./zh-cn/apis/IEnumerable/methods/groupBy.json":167,"./zh-cn/apis/IEnumerable/methods/groupJoin.json":168,"./zh-cn/apis/IEnumerable/methods/includes.json":169,"./zh-cn/apis/IEnumerable/methods/indexOf.json":170,"./zh-cn/apis/IEnumerable/methods/intersect.json":171,"./zh-cn/apis/IEnumerable/methods/join.json":172,"./zh-cn/apis/IEnumerable/methods/last.json":173,"./zh-cn/apis/IEnumerable/methods/lastIndexOf.json":174,"./zh-cn/apis/IEnumerable/methods/lastOrDefault.json":175,"./zh-cn/apis/IEnumerable/methods/map.json":176,"./zh-cn/apis/IEnumerable/methods/max.json":177,"./zh-cn/apis/IEnumerable/methods/min.json":178,"./zh-cn/apis/IEnumerable/methods/ofType.json":179,"./zh-cn/apis/IEnumerable/methods/orderBy.json":180,"./zh-cn/apis/IEnumerable/methods/orderByDescending.json":181,"./zh-cn/apis/IEnumerable/methods/pop.json":182,"./zh-cn/apis/IEnumerable/methods/push.json":183,"./zh-cn/apis/IEnumerable/methods/reduce.json":184,"./zh-cn/apis/IEnumerable/methods/reduceRight.json":185,"./zh-cn/apis/IEnumerable/methods/reverse.json":186,"./zh-cn/apis/IEnumerable/methods/select.json":187,"./zh-cn/apis/IEnumerable/methods/selectMany.json":188,"./zh-cn/apis/IEnumerable/methods/sequenceEqual.json":189,"./zh-cn/apis/IEnumerable/methods/shift.json":190,"./zh-cn/apis/IEnumerable/methods/single.json":191,"./zh-cn/apis/IEnumerable/methods/singleOrDefault.json":192,"./zh-cn/apis/IEnumerable/methods/skip.json":193,"./zh-cn/apis/IEnumerable/methods/skipWhile.json":194,"./zh-cn/apis/IEnumerable/methods/slice.json":195,"./zh-cn/apis/IEnumerable/methods/some.json":196,"./zh-cn/apis/IEnumerable/methods/sort.json":197,"./zh-cn/apis/IEnumerable/methods/splice.json":198,"./zh-cn/apis/IEnumerable/methods/sum.json":199,"./zh-cn/apis/IEnumerable/methods/take.json":200,"./zh-cn/apis/IEnumerable/methods/takeWhile.json":201,"./zh-cn/apis/IEnumerable/methods/toArray.json":202,"./zh-cn/apis/IEnumerable/methods/toDirectory.json":203,"./zh-cn/apis/IEnumerable/methods/toLookup.json":204,"./zh-cn/apis/IEnumerable/methods/toObject.json":205,"./zh-cn/apis/IEnumerable/methods/union.json":206,"./zh-cn/apis/IEnumerable/methods/unshift.json":207,"./zh-cn/apis/IEnumerable/methods/where.json":208,"./zh-cn/apis/IEnumerable/methods/zip.json":209,"./zh-cn/apis/IEnumerable/properties/length.json":210,"./zh-cn/apis/IEnumerable/properties/size.json":211,"./zh-cn/apis/IEnumerator.json":212,"./zh-cn/apis/IEnumerator/meta.json":213,"./zh-cn/apis/IEnumerator/methods/moveNext.json":214,"./zh-cn/apis/IEnumerator/methods/reset.json":215,"./zh-cn/apis/IEnumerator/properties/current.json":216,"./zh-cn/apis/IGrouping.json":217,"./zh-cn/apis/IGrouping/meta.json":218,"./zh-cn/apis/IGrouping/properties/key.json":219,"./zh-cn/apis/IMapEnumerable.json":220,"./zh-cn/apis/IMapEnumerable/meta.json":221,"./zh-cn/apis/IMapEnumerable/methods/forEach.json":222,"./zh-cn/apis/IMapEnumerable/methods/toDirectory.json":223,"./zh-cn/apis/IMapEnumerable/methods/toLookup.json":224,"./zh-cn/apis/IOrderedEnumerable.json":225,"./zh-cn/apis/IOrderedEnumerable/meta.json":226,"./zh-cn/apis/IOrderedEnumerable/methods/thenBy.json":227,"./zh-cn/apis/IOrderedEnumerable/methods/thenByDescending.json":228,"./zh-cn/apis/Lookup.json":229,"./zh-cn/apis/Lookup/meta.json":230,"./zh-cn/apis/Lookup/methods/get.json":231,"./zh-cn/apis/Lookup/methods/set.json":232,"./zh-cn/apis/Plugin.json":233,"./zh-cn/apis/Plugin/meta.json":234,"./zh-cn/caption.json":235,"./zh-cn/change.json":236,"./zh-cn/change/2.1.15.json":237,"./zh-cn/change/2.1.16.json":238,"./zh-cn/change/2.1.17.pre.json":239,"./zh-cn/directory.json":240,"./zh-cn/directory.meta.json":241,"./zh-cn/guides/action.json":242,"./zh-cn/guides/comparer.json":243,"./zh-cn/guides/config.json":244,"./zh-cn/guides/enumerator.json":245,"./zh-cn/guides/extend.json":246,"./zh-cn/guides/instance.json":247,"./zh-cn/guides/iterator.json":248,"./zh-cn/guides/plugin.json":249,"./zh-cn/guides/predicate.json":250,"./zh-cn/guides/selector.json":251,"./zh-cn/install.json":252,"./zh-cn/introduction.json":253,"./zh-cn/meta.json":254};t.keys=function(){return Object.keys(a)},t.resolve=n,e.exports=t,t.id=17},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,r,s){function t(e){return s(n(e))}function n(e){var r=a[e];if(!(r+1))throw new Error("Cannot find module '"+e+"'.");return r}var a={"./resources/en-us/apis/Enumerable.json":60,"./resources/en-us/apis/Enumerable/meta.json":61,"./resources/en-us/apis/Enumerable/methods/asEnumerable.json":62,"./resources/en-us/apis/Enumerable/methods/empty.json":63,"./resources/en-us/apis/Enumerable/properties/actions.json":64,"./resources/en-us/apis/Enumerable/properties/comparers.json":65,"./resources/en-us/apis/Enumerable/properties/config.json":66,"./resources/en-us/apis/Enumerable/properties/predicates.json":67,"./resources/en-us/apis/Enumerable/properties/selectors.json":68,"./resources/en-us/caption.json":69,"./resources/en-us/change.json":70,"./resources/en-us/directory.json":71,"./resources/en-us/directory.meta.json":72,"./resources/en-us/guides/action.json":73,"./resources/en-us/install.json":74,"./resources/en-us/introduction.json":75,"./resources/en-us/meta.json":76,"./resources/examples/IEnumerable.json":77,"./resources/examples/IEnumerable/methods/aggregate.json":78,"./resources/examples/config.json":79,"./resources/examples/instance.json":80,"./resources/lang.json":14,"./resources/versions.json":15,"./resources/zh-cn/about.json":81,"./resources/zh-cn/apis/Directory.json":82,"./resources/zh-cn/apis/Directory/meta.json":83,"./resources/zh-cn/apis/Directory/methods/delete.json":84,"./resources/zh-cn/apis/Directory/methods/get.json":85,"./resources/zh-cn/apis/Directory/methods/has.json":86,"./resources/zh-cn/apis/Directory/methods/set.json":87,"./resources/zh-cn/apis/Entry.json":88,"./resources/zh-cn/apis/Entry/meta.json":89,"./resources/zh-cn/apis/Entry/properties/key.json":90,"./resources/zh-cn/apis/Entry/properties/value.json":91,"./resources/zh-cn/apis/Enumerable.actions.json":92,"./resources/zh-cn/apis/Enumerable.actions/meta.json":93,"./resources/zh-cn/apis/Enumerable.actions/properties/default.json":94,"./resources/zh-cn/apis/Enumerable.comparers.json":95,"./resources/zh-cn/apis/Enumerable.comparers/meta.json":96,"./resources/zh-cn/apis/Enumerable.comparers/methods/array.json":97,"./resources/zh-cn/apis/Enumerable.comparers/methods/greater.json":98,"./resources/zh-cn/apis/Enumerable.comparers/methods/less.json":99,"./resources/zh-cn/apis/Enumerable.comparers/methods/predicate.json":100,"./resources/zh-cn/apis/Enumerable.comparers/properties/default.json":101,"./resources/zh-cn/apis/Enumerable.comparers/properties/equality.json":102,"./resources/zh-cn/apis/Enumerable.comparers/properties/same.json":103,"./resources/zh-cn/apis/Enumerable.comparers/properties/strict.json":104,"./resources/zh-cn/apis/Enumerable.config.json":105,"./resources/zh-cn/apis/Enumerable.config/meta.json":106,"./resources/zh-cn/apis/Enumerable.config/properties/as.json":107,"./resources/zh-cn/apis/Enumerable.config/properties/extends.array.json":108,"./resources/zh-cn/apis/Enumerable.config/properties/extends.object.json":109,"./resources/zh-cn/apis/Enumerable.config/properties/extends.string.json":110,"./resources/zh-cn/apis/Enumerable.json":111,"./resources/zh-cn/apis/Enumerable.predicates.json":112,"./resources/zh-cn/apis/Enumerable.predicates/meta.json":113,"./resources/zh-cn/apis/Enumerable.predicates/methods/equality.json":114,"./resources/zh-cn/apis/Enumerable.predicates/methods/not.json":115,"./resources/zh-cn/apis/Enumerable.predicates/methods/properties.json":116,"./resources/zh-cn/apis/Enumerable.predicates/methods/regexp.json":117,"./resources/zh-cn/apis/Enumerable.predicates/methods/same.json":118,"./resources/zh-cn/apis/Enumerable.predicates/methods/selector.json":119,"./resources/zh-cn/apis/Enumerable.predicates/methods/strict.json":120,"./resources/zh-cn/apis/Enumerable.predicates/properties/default.json":121,"./resources/zh-cn/apis/Enumerable.predicates/properties/exists.json":122,"./resources/zh-cn/apis/Enumerable.selectors.json":123,"./resources/zh-cn/apis/Enumerable.selectors/meta.json":124,"./resources/zh-cn/apis/Enumerable.selectors/methods/property.json":125,"./resources/zh-cn/apis/Enumerable.selectors/properties/default.json":126,"./resources/zh-cn/apis/Enumerable.selectors/properties/key.json":127,"./resources/zh-cn/apis/Enumerable.selectors/properties/result.json":128,"./resources/zh-cn/apis/Enumerable.selectors/properties/value.json":129,"./resources/zh-cn/apis/Enumerable/meta.json":130,"./resources/zh-cn/apis/Enumerable/methods/asEnumerable.json":131,"./resources/zh-cn/apis/Enumerable/methods/empty.json":132,"./resources/zh-cn/apis/Enumerable/methods/range.json":133,"./resources/zh-cn/apis/Enumerable/methods/repeat.json":134,"./resources/zh-cn/apis/Enumerable/properties/actions.json":135,"./resources/zh-cn/apis/Enumerable/properties/comparers.json":136,"./resources/zh-cn/apis/Enumerable/properties/config.json":137,"./resources/zh-cn/apis/Enumerable/properties/predicates.json":138,"./resources/zh-cn/apis/Enumerable/properties/selectors.json":139,"./resources/zh-cn/apis/IEnumerable.json":140,"./resources/zh-cn/apis/IEnumerable/meta.json":141,"./resources/zh-cn/apis/IEnumerable/methods/aggregate.json":142,"./resources/zh-cn/apis/IEnumerable/methods/all.json":143,"./resources/zh-cn/apis/IEnumerable/methods/any.json":144,"./resources/zh-cn/apis/IEnumerable/methods/asEnumerable.json":145,"./resources/zh-cn/apis/IEnumerable/methods/average.json":146,"./resources/zh-cn/apis/IEnumerable/methods/concat.json":147,"./resources/zh-cn/apis/IEnumerable/methods/contains.json":148,"./resources/zh-cn/apis/IEnumerable/methods/copyWithin.json":149,"./resources/zh-cn/apis/IEnumerable/methods/count.json":150,"./resources/zh-cn/apis/IEnumerable/methods/defaultIfEmpty.json":151,"./resources/zh-cn/apis/IEnumerable/methods/distinct.json":152,"./resources/zh-cn/apis/IEnumerable/methods/elementAt.json":153,"./resources/zh-cn/apis/IEnumerable/methods/elementAtOrDefault.json":154,"./resources/zh-cn/apis/IEnumerable/methods/every.json":155,"./resources/zh-cn/apis/IEnumerable/methods/except.json":156,"./resources/zh-cn/apis/IEnumerable/methods/fill.json":157,"./resources/zh-cn/apis/IEnumerable/methods/filter.json":158,"./resources/zh-cn/apis/IEnumerable/methods/find.json":159,"./resources/zh-cn/apis/IEnumerable/methods/findIndex.json":160,"./resources/zh-cn/apis/IEnumerable/methods/findLast.json":161,"./resources/zh-cn/apis/IEnumerable/methods/findLastIndex.json":162,"./resources/zh-cn/apis/IEnumerable/methods/first.json":163,"./resources/zh-cn/apis/IEnumerable/methods/firstOrDefault.json":164,"./resources/zh-cn/apis/IEnumerable/methods/forEach.json":165,"./resources/zh-cn/apis/IEnumerable/methods/getEnumerator.json":166,"./resources/zh-cn/apis/IEnumerable/methods/groupBy.json":167,"./resources/zh-cn/apis/IEnumerable/methods/groupJoin.json":168,"./resources/zh-cn/apis/IEnumerable/methods/includes.json":169,"./resources/zh-cn/apis/IEnumerable/methods/indexOf.json":170,"./resources/zh-cn/apis/IEnumerable/methods/intersect.json":171,"./resources/zh-cn/apis/IEnumerable/methods/join.json":172,"./resources/zh-cn/apis/IEnumerable/methods/last.json":173,"./resources/zh-cn/apis/IEnumerable/methods/lastIndexOf.json":174,"./resources/zh-cn/apis/IEnumerable/methods/lastOrDefault.json":175,"./resources/zh-cn/apis/IEnumerable/methods/map.json":176,"./resources/zh-cn/apis/IEnumerable/methods/max.json":177,"./resources/zh-cn/apis/IEnumerable/methods/min.json":178,"./resources/zh-cn/apis/IEnumerable/methods/ofType.json":179,"./resources/zh-cn/apis/IEnumerable/methods/orderBy.json":180,"./resources/zh-cn/apis/IEnumerable/methods/orderByDescending.json":181,"./resources/zh-cn/apis/IEnumerable/methods/pop.json":182,"./resources/zh-cn/apis/IEnumerable/methods/push.json":183,"./resources/zh-cn/apis/IEnumerable/methods/reduce.json":184,"./resources/zh-cn/apis/IEnumerable/methods/reduceRight.json":185,"./resources/zh-cn/apis/IEnumerable/methods/reverse.json":186,"./resources/zh-cn/apis/IEnumerable/methods/select.json":187,"./resources/zh-cn/apis/IEnumerable/methods/selectMany.json":188,"./resources/zh-cn/apis/IEnumerable/methods/sequenceEqual.json":189,"./resources/zh-cn/apis/IEnumerable/methods/shift.json":190,"./resources/zh-cn/apis/IEnumerable/methods/single.json":191,"./resources/zh-cn/apis/IEnumerable/methods/singleOrDefault.json":192,"./resources/zh-cn/apis/IEnumerable/methods/skip.json":193,"./resources/zh-cn/apis/IEnumerable/methods/skipWhile.json":194,"./resources/zh-cn/apis/IEnumerable/methods/slice.json":195,"./resources/zh-cn/apis/IEnumerable/methods/some.json":196,"./resources/zh-cn/apis/IEnumerable/methods/sort.json":197,"./resources/zh-cn/apis/IEnumerable/methods/splice.json":198,"./resources/zh-cn/apis/IEnumerable/methods/sum.json":199,"./resources/zh-cn/apis/IEnumerable/methods/take.json":200,"./resources/zh-cn/apis/IEnumerable/methods/takeWhile.json":201,"./resources/zh-cn/apis/IEnumerable/methods/toArray.json":202,"./resources/zh-cn/apis/IEnumerable/methods/toDirectory.json":203,"./resources/zh-cn/apis/IEnumerable/methods/toLookup.json":204,"./resources/zh-cn/apis/IEnumerable/methods/toObject.json":205,"./resources/zh-cn/apis/IEnumerable/methods/union.json":206,"./resources/zh-cn/apis/IEnumerable/methods/unshift.json":207,"./resources/zh-cn/apis/IEnumerable/methods/where.json":208,"./resources/zh-cn/apis/IEnumerable/methods/zip.json":209,"./resources/zh-cn/apis/IEnumerable/properties/length.json":210,"./resources/zh-cn/apis/IEnumerable/properties/size.json":211,"./resources/zh-cn/apis/IEnumerator.json":212,"./resources/zh-cn/apis/IEnumerator/meta.json":213,"./resources/zh-cn/apis/IEnumerator/methods/moveNext.json":214,"./resources/zh-cn/apis/IEnumerator/methods/reset.json":215,"./resources/zh-cn/apis/IEnumerator/properties/current.json":216,"./resources/zh-cn/apis/IGrouping.json":217,"./resources/zh-cn/apis/IGrouping/meta.json":218,"./resources/zh-cn/apis/IGrouping/properties/key.json":219,"./resources/zh-cn/apis/IMapEnumerable.json":220,"./resources/zh-cn/apis/IMapEnumerable/meta.json":221,"./resources/zh-cn/apis/IMapEnumerable/methods/forEach.json":222,"./resources/zh-cn/apis/IMapEnumerable/methods/toDirectory.json":223,"./resources/zh-cn/apis/IMapEnumerable/methods/toLookup.json":224,"./resources/zh-cn/apis/IOrderedEnumerable.json":225,"./resources/zh-cn/apis/IOrderedEnumerable/meta.json":226,"./resources/zh-cn/apis/IOrderedEnumerable/methods/thenBy.json":227,"./resources/zh-cn/apis/IOrderedEnumerable/methods/thenByDescending.json":228,"./resources/zh-cn/apis/Lookup.json":229,"./resources/zh-cn/apis/Lookup/meta.json":230,"./resources/zh-cn/apis/Lookup/methods/get.json":231,"./resources/zh-cn/apis/Lookup/methods/set.json":232,"./resources/zh-cn/apis/Plugin.json":233,"./resources/zh-cn/apis/Plugin/meta.json":234,"./resources/zh-cn/caption.json":235,"./resources/zh-cn/change.json":236,"./resources/zh-cn/change/2.1.15.json":237,"./resources/zh-cn/change/2.1.16.json":238,"./resources/zh-cn/change/2.1.17.pre.json":239,"./resources/zh-cn/directory.json":240,"./resources/zh-cn/directory.meta.json":241,"./resources/zh-cn/guides/action.json":242,"./resources/zh-cn/guides/comparer.json":243,"./resources/zh-cn/guides/config.json":244,"./resources/zh-cn/guides/enumerator.json":245,"./resources/zh-cn/guides/extend.json":246,"./resources/zh-cn/guides/instance.json":247,"./resources/zh-cn/guides/iterator.json":248,"./resources/zh-cn/guides/plugin.json":249,"./resources/zh-cn/guides/predicate.json":250,"./resources/zh-cn/guides/selector.json":251,"./resources/zh-cn/install.json":252,"./resources/zh-cn/introduction.json":253,"./resources/zh-cn/meta.json":254};t.keys=function(){return Object.keys(a)},t.resolve=n,e.exports=t,t.id=59},function(e,r){e.exports={constructors:{histroys:[{overloads:[{description:"Create an object of type IEnumerable from source"}]}]},name:"Enumerable",properties:[{name:"actions",histroys:[{description:"An object contains same useful actions"}]},{name:"comparers",histroys:[{description:"An object contains same useful comparers"}]},{name:"config",histroys:[{description:"Global config"}]},{name:"predicates",histroys:[{description:"An object contains same useful predicates"}]},{name:"selectors",histroys:[{description:"An object contains same useful selectors"}]}],methods:[{name:"asEnumerable",histroys:[{overloads:[{description:"Create an object of type IEnumerable from source"}]}]},{name:"empty",histroys:[{overloads:[{description:"Create an empty IEnumerable object"}]}]}]}},function(e,r){e.exports={constructors:{histroys:[{overloads:[{description:"Create an object of type IEnumerable from source"}]}]}}},function(e,r){e.exports={histroys:[{overloads:[{description:"Create an object of type IEnumerable from source"}]}]}},function(e,r){e.exports={histroys:[{overloads:[{description:"Create an empty IEnumerable object"}]}]}},function(e,r){e.exports={histroys:[{description:"An object contains same useful actions"}]}},function(e,r){e.exports={histroys:[{description:"An object contains same useful comparers"}]}},function(e,r){e.exports={histroys:[{description:"Global config"}]}},function(e,r){e.exports={histroys:[{description:"An object contains same useful predicates"}]}},function(e,r){e.exports={histroys:[{description:"An object contains same useful selectors"}]}},function(e,r){e.exports={class:"class",interface:"interface",object:"object",constructor:"constructor",constructors:"constructors",property:"property",properties:"properties",method:"method",methods:"methods",since:"since",deprecated:"deprecated",details:"details",description:"description",summary:"summary",warning:"warning",warnings:"warnings",remark:"remark",remarks:"remarks",example:"example",examples:"examples",static:"static",see:"see",declare:"declare",parameters:"parameters",parameter:"parameter",returns:"return value",generics:"type parameters",apis:"APIs",guide:"Guide",publish:"publish",time:"time",date:"date",prepublish:"prepublish",version:"version",author:"author",email:"email",project:"project",newInstance:{only:"can only use new operator",both:"can use new operator or not",cannot:"can not use new operator"}}},function(e,r){e.exports=[{publish:"2017-03-27",contents:["优化了部分代码结构","新增 对 arrayComparer 的默认支持","新增了 对绝大部分 selector, predicate, comparer 参数校验","新增 绝大部分的 selector, predicate, comparer 参数均支持 String 或 Symbol 类型数据 表示选择对象对应的字段 的功能","新增 Enumerable.predicates.exists 属性, 表示非空筛选器","新增 Enumerable.predicates.regexp 方法, 生成正则匹配的筛选器","新增 Enumerable.predicates.not 方法, 生成逻辑非筛选器","新增 Enumerable.predicates.selector 方法, 生成选择筛选器","新增 Enumerable.predicates.equality, Enumerable.predicates.strict, Enumerable.predicates.same 方法, 生成比较筛选器"],version:"2.1.15"},{publish:"2017-04-05",contents:["优化 selectMany 方法, 使的使用上更接近linq原生的方法. 修复 selectMany 方法 collectionSelector 返回 Iterator,string,object 对象是出现异常的bug","修改 defaultGroupResultSelector 为 defaultResultSelector, 修改 Enumerable.selectors.groupResult 为 Enumerable.selectors.result","修改 selectMany 方法的 resultSelector 参数的结构和默认值, 与 defaultResultSelector 一致","增加 zip 方法的 resultSelector 的默认值为 defaultResultSelector"],version:"2.1.16"},{prepublish:!0,contents:["新增 findLast 方法","新增 Enumerable.comparers.greater 方法","新增 Enumerable.comparers.less 方法","新增 Enumerable.predicates.properties 方法, 生成一个属性筛选器","新增所有的 predicate 参数, 如果使用 Array 或者 Object 类型作为参数时, 自动经过 Enumerable.predicates.properties 方法转译成一个筛选器","优化 comparer / predicate / selector 类型的参数 转化过程的效率"],version:"2.1.17.pre"}]},function(e,r){e.exports=[{code:"introduction",title:"Introduction"},{code:"install",title:"Install"},{code:"guides",title:"Guide",children:[{code:"instance",title:"获取 IEnumerable 实例",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"config",title:"配置",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"selector",title:"选择器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"predicate",title:"筛选器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"comparer",title:"比较器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"action",title:"Action",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"iterator",title:"迭代器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"enumerator",title:"枚举器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"extend",title:"扩展",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"plugin",title:"插件",since:"2.1.15",deprecated:"2.1.17.pre"}]},{code:"apis",title:"APIs",children:[{code:"Directory",title:"Directory Class",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Entry",title:"Entry Class",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable",title:"Enumerable Class",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.actions",title:"Enumerable.actions Object",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.comparers",title:"Enumerable.comparers Object",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.config",title:"Enumerable.config Object",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.predicates",title:"Enumerable.predicates Object",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.selectors",title:"Enumerable.selectors Object",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IEnumerable",title:"IEnumerable Interface",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IEnumerator",title:"IEnumerator Interface",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IGrouping",title:"IGrouping Interface",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IMapEnumerable",title:"IMapEnumerable Interface",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IOrderedEnumerable",title:"IOrderedEnumerable Interface",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Lookup",title:"Lookup Class",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Plugin",title:"Plugin Class",since:"2.1.15",deprecated:"2.1.17.pre"}]},{code:"change",title:"Change List"},{code:"about",title:"About"}]},function(e,r){e.exports=[{code:"introduction",title:"Introduction"},{code:"install",title:"Install"},"guides","apis",{code:"change",title:"Change List"},{code:"about",title:"About"}]},function(e,r){e.exports={title:"Action",contents:[{title:"What's the Action",descriptions:[{content:"Action is a function which is only execute some calculation for the parameters"},{content:"The Action function accept one parameter, or accept another parameter which is the index of the first parameter in the enumerable as the second parameter, then execute some calculation but return nothing"},{}]}]}},function(e,r){e.exports={title:"Install"}},function(e,r){e.exports={title:"Introduction",contents:["use linq and lambda in javascript for es6"]}},function(e,r){e.exports={name:"English"}},function(e,r){e.exports={}},function(e,r){e.exports={"1.js":'let fruits = [ "apple", "mango", "orange", "passionfruit", "grape" ];\r\n\r\n// Determine whether any string in the array is longer than "banana".\r\nlet longestName =\r\n\tfruits.asEnumerable().aggregate("banana",\r\n\t\t(longest, next) =>\r\n\t\t\tnext.length > longest.length ? next : longest,\r\n\t\t// Return the final result as an upper case string.\r\n\t\tfruit => fruit.toUpperCase());\r\n\r\nconsole.log(`The fruit with the longest name is ${ longestName }`);\r\n\r\n// This code produces the following output:\r\n//\r\n// The fruit with the longest name is PASSIONFRUIT.'}},function(e,r){e.exports={"config.as.js":"Enumerable.config.as = 'em';\r\nlet enumerable = [1, 2, 3].em();","config.extends.js":"Enumerable.config.extends.array = true; //开启针对Array的扩展\r\nEnumerable.config.extends.string = true; //开启针对String的扩展\r\nEnumerable.config.extends.object = true; //开启针对Object的扩展"}},function(e,r){e.exports={"asEnumerable.js":"let a = [1, 2, 3].asEnumerable();\r\nlet o = ({ key: 1, value: 'a' }).asEnumerable();\r\nlet s = 'abc'.asEnumerable();","Enumerable.asEnumerable.js":"let enumerable = Enumerable.asEnumerable([1, 2, 3]);","Enumerable.js":"let enumerable = Enumerable([1, 2, 3]);"}},function(e,r){e.exports={author:"散漫的水元素",emails:["491029934@qq.com","wm123450405@hotmail.com"],projects:[{name:"github",href:"https://github.com/wm123450405/linqjs"}],publishs:[{name:"node",href:"https://www.npmjs.com/package/linq-js"}]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:["IMapEnumerable"],name:"Directory",properties:[],methods:[{name:"delete",histroys:[{since:"2.1.15",overloads:[{description:"通过指定的相等比较器从 Directory 中移除指定的键",parameters:[{name:"key"},{name:"comparer"}]}]}]},{name:"get",histroys:[{since:"2.1.15",overloads:[{description:"通过指定的相等比较器查找指定键对应的值",parameters:[{name:"key"},{name:"comparer"}]}]}]},{name:"has",histroys:[{since:"2.1.15",overloads:[{description:"通过指定的相等比较器判断 Directory 中是否包含指定的键",parameters:[{name:"key"},{name:"comparer"}]}]}]},{name:"set",histroys:[{since:"2.1.15",overloads:[{description:"通过指定的相等比较器为指定键设置对应的值",parameters:[{name:"key"},{name:"value"},{name:"comparer"}]}]}]}]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:["IMapEnumerable"]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"key",types:["any"],descriptions:["用于查找的键"]},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"boolean",descriptions:["返回是否包含指定的键"]},description:"通过指定的相等比较器从 Directory 中移除指定的键",sees:[{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"key",types:["any"],descriptions:["用于查找的键"]},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"any",descriptions:["键所对应的值"]},description:"通过指定的相等比较器查找指定键对应的值",sees:[{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"key",types:["any"],descriptions:["用于查找的键"]},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"boolean",descriptions:["返回是否包含指定的键"]},description:"通过指定的相等比较器判断 Directory 中是否包含指定的键",sees:[{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"key",types:["any"],descriptions:["用于查找的键"]},{name:"value",types:["any"],descriptions:["要设置的值"]},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"any",descriptions:["返回 Directory 对象本身"]},description:"通过指定的相等比较器为指定键设置对应的值",sees:[{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:[],name:"Entry",properties:[{name:"key",histroys:[{since:"2.1.15",description:"此entry的key"}]},{name:"value",histroys:[{since:"2.1.15",description:"此entry的value"}]}],methods:[]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:[]}},function(e,r){e.exports={histroys:[{type:"any",since:"2.1.15",description:"此entry的key"}]}},function(e,r){e.exports={histroys:[{type:"any",since:"2.1.15",description:"此entry的value"}]}},function(e,r){e.exports={type:"object",since:"2.1.15",name:"Enumerable.actions",properties:[{name:"default",histroys:[{since:"2.1.15",description:"默认的执行器"}]}],methods:[]}},function(e,r){e.exports={type:"object",since:"2.1.15"}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的执行器",remarks:["该执行器接受一个元素和该元素所在序列的索引作为参数, 但是不做任何处理, 通常表示为 defaultAction"],sees:[{guide:"action"}]}]}},function(e,r){e.exports={type:"object",since:"2.1.15",name:"Enumerable.comparers",properties:[{name:"default",histroys:[{since:"2.1.15",description:"默认的大小比较器"}]},{name:"equality",histroys:[{since:"2.1.15",description:"默认的相等比较器"}]},{name:"same",histroys:[{since:"2.1.15",description:"默认的相同比较器"}]},{name:"strict",histroys:[{since:"2.1.15",description:"默认的全等比较器"}]}],methods:[{name:"array",histroys:[{since:"2.1.15",overloads:[{description:"获取一个大小比较器",parameters:[{name:"array"},{name:"last"},{name:"comparer"}]}]}]},{name:"greater",histroys:[{since:"2.1.17",overloads:[{description:"通过一个大于判断函数与一个相等比较器生成一个大小比较器",parameters:[{name:"greaterThen"},{name:"comparer"}]}]}]},{name:"less",histroys:[{since:"2.1.17",overloads:[{description:"通过一个小于判断函数与一个相等比较器生成一个大小比较器",parameters:[{name:"lessThen"},{name:"comparer"}]}]}]},{name:"predicate",histroys:[{since:"2.1.15",overloads:[{description:"获取一个大小比较器",parameters:[{name:"predicateArray"},{name:"last"}]}]}]}]}},function(e,r){e.exports={type:"object",since:"2.1.15"}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"array",types:["array"]},{name:"last",types:["boolean"],defaultValue:"false"},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"function",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},description:"获取一个大小比较器",remarks:["返回一个大小比较器函数, 该比较器按照指定的 array 值的循序(作为从小到大的方式)判别待比较的元素"],sees:[{guide:"comparer"},{apis:"Enumerable.comparers",property:"equality"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.17",overloads:[{parameters:[{name:"greaterThen",types:["function"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"function",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},description:"通过一个大于判断函数与一个相等比较器生成一个大小比较器",remarks:["返回一个大小比较器函数, 该函数两个参数在调用 comparer 后返回 true 时该函数返回 0 表示两个参数值相等, 否则在调用 greaterThen 函数后返回 true 时该函数返回 1 表示传入的第一个参数值大于第二个参数值, 否则返回 -1 表示传入的第一个参数值小于第二个参数值"],sees:[{apis:"Enumerable.comparers",method:"less"},{guide:"comparer"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.17",overloads:[{parameters:[{name:"lessThen",types:["function"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"function",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},description:"通过一个小于判断函数与一个相等比较器生成一个大小比较器",remarks:["返回一个大小比较器函数, 该函数两个参数在调用 comparer 后返回 true 时该函数返回 0 表示两个参数值相等, 否则在调用 lessThen 函数后返回 true 时该函数返回 -1 表示传入的第一个参数值小于第二个参数值, 否则返回 1 表示传入的第一个参数值大于第二个参数值"],sees:[{apis:"Enumerable.comparers",method:"greater"},{guide:"comparer"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicateArray",types:["array"]},{name:"last",types:["boolean"],defaultValue:"false"}],returns:{type:"function",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},description:"获取一个大小比较器",remarks:["返回一个大小比较器函数, 该比较器按照指定的 predicateArray 中的函数的匹配循序(作为从小到大的方式)判别待比较的元素"],sees:[{guide:"comparer"}]}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的大小比较器",remarks:["该比较器是一个大小比较器, 它接受两个用于比较的元素作为参数, 返回一个number表示大小, 通常表示为 defaultComparer","如果返回值大于0, 则表示第一个参数大于第二个参数. 如果返回值小于0, 则表示第一个参数小于第二个参数. 如果返回值等于0, 则表示两个参数相等"],sees:[{guide:"comparer"}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的相等比较器",remarks:["defaultEqualityComparer"],sees:[{guide:"comparer"}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的相同比较器",remarks:["defaultSameComparer"],sees:[{guide:"comparer"}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的全等比较器",remarks:["defaultStrictEqualityComparer"],sees:[{guide:"comparer"}]}]}},function(e,r){e.exports={type:"object",since:"2.1.15",name:"Enumerable.config",properties:[{name:"as",histroys:[{since:"2.1.15",description:"设置 asEnumerable 方法的别名"}]},{name:"extends.array",histroys:[{since:"2.1.15",description:"开启或关闭对原生 Array 对象的扩展"}]},{name:"extends.object",histroys:[{since:"2.1.15",description:"开启或关闭对原生 Object 对象的扩展"}]},{name:"extends.string",histroys:[{since:"2.1.15",description:"开启或关闭对原生 String 对象的扩展"}]}],methods:[]}},function(e,r){e.exports={type:"object",since:"2.1.15"}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"设置 asEnumerable 方法的别名",remarks:["为所有对象的 asEnumerable 方法设置一个别名"],warnings:["设置此别名后 asEnumerable 方法依然有效"]}]}},function(e,r){e.exports={histroys:[{type:"boolean",since:"2.1.15",description:"开启或关闭对原生 Array 对象的扩展",sees:[{guide:"extend"}]}]}},function(e,r){e.exports={histroys:[{type:"boolean",since:"2.1.15",description:"开启或关闭对原生 Object 对象的扩展",sees:[{guide:"extend"}]}]}},function(e,r){e.exports={histroys:[{type:"boolean",since:"2.1.15",description:"开启或关闭对原生 String 对象的扩展",sees:[{guide:"extend"}]}]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:[],constructors:{histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"source",types:["any"]}],returns:{type:"IEnumerable"},newInstance:"cannot",description:"通过指定的 source 创建一个 IEnumerable 对象",sees:[{apis:"Enumerable",method:"asEnumerable"}]}]}]},name:"Enumerable",properties:[{name:"actions",histroys:[{since:"2.1.15",static:!0,description:"一个包含了一些常用执行器的对象"}]},{name:"comparers",histroys:[{since:"2.1.15",static:!0,description:"一个包含了一些常用比较器的对象"}]},{name:"config",histroys:[{since:"2.1.15",static:!0,description:"全局配置"}]},{name:"predicates",histroys:[{since:"2.1.15",static:!0,description:"一个包含了一些常用筛选器的对象"}]},{name:"selectors",histroys:[{since:"2.1.15",static:!0,description:"一个包含了一些常用选择器的对象"}]}],methods:[{name:"asEnumerable",histroys:[{since:"2.1.15",overloads:[{static:!0,description:"通过指定的 source 创建一个 IEnumerable 对象",parameters:[{name:"source"}]}]}]},{name:"empty",histroys:[{since:"2.1.15",overloads:[{static:!0,description:"生成一个空序列",parameters:[]}]}]},{name:"range",histroys:[{since:"2.1.15",overloads:[{static:!0,description:"生成指定范围内的整数序列",parameters:[{name:"start"},{name:"count"}]}]}]},{name:"repeat",histroys:[{since:"2.1.15",overloads:[{static:!0,description:"将生成一个序列, 其中包含指定数量个重复的值",parameters:[{name:"element"},{name:"count"}]}]}]}]}},function(e,r){e.exports={type:"object",since:"2.1.15",name:"Enumerable.predicates",properties:[{name:"default",histroys:[{since:"2.1.15",description:"默认的筛选器"}]},{name:"exists",histroys:[{since:"2.1.15",description:"非空筛选器"}]}],methods:[{name:"equality",histroys:[{since:"2.1.15",overloads:[{description:"获取一个相等筛选器",parameters:[{name:"value"},{name:"comparer"}]}]}]},{name:"not",histroys:[{since:"2.1.15",overloads:[{description:"获取一个否定筛选器",parameters:[{name:"predicate"}]}]}]},{name:"properties",histroys:[{since:"2.1.17",overloads:[{description:"获取一个属性筛选器",parameters:[{name:"properties"},{name:"comparer"}]}]}]},{name:"regexp",histroys:[{since:"2.1.15",overloads:[{description:"获取一个正则筛选器",parameters:[{name:"regexp"},{name:"keySelector"}]}]}]},{name:"same",histroys:[{since:"2.1.15",overloads:[{description:"获取一个相同筛选器",parameters:[{name:"value"}]}]}]},{name:"selector",histroys:[{since:"2.1.15",overloads:[{description:"获取一个映射筛选器",parameters:[{name:"selector"},{name:"predicate"}]}]}]},{name:"strict",histroys:[{since:"2.1.15",overloads:[{description:"获取一个全等筛选器",parameters:[{name:"value"}]}]}]}]}},function(e,r){e.exports={type:"object",since:"2.1.15"}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"value",types:["any"]},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"function",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]}]}},description:"获取一个相等筛选器",remarks:["返回一个筛选器函数, 通过指定的相等比较器比较参数是否与指定的值相等"],sees:[{guide:"predicate"},{apis:"Enumerable.comparers",property:"equality"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],defaultValue:"defaultExistsPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"function",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},description:"获取一个否定筛选器",remarks:["返回一个筛选器函数, 如果 predicate 返回 true, 这该函数返回 false, 反之亦然"],sees:[{guide:"predicate"},{apis:"Enumerable.predicates",property:"exists"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.17",overloads:[{parameters:[{name:"properties",types:["object","array"]},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"function",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},description:"获取一个属性筛选器",remarks:["返回一个筛选器函数, 该筛选器通过深度对比 properties 所描述的键值对关系来判断传入参数是否符合条件"],sees:[{guide:"predicate"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"regexp",types:["RegExp"]},{name:"keySelector",types:["function","string","symbol","number"],defaultValue:"defaultSelector",declare:{returns:{type:"string"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"function",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},description:"获取一个正则筛选器",remarks:["返回一个筛选器函数, 比较通过指定的 selector 映射传入的参数值后的值是否与匹配指定的正则表达式"],sees:[{guide:"predicate"},{apis:"Enumerable.selectors",property:"default"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"value",types:["any"]}],returns:{type:"function",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]}]}},description:"获取一个相同筛选器",remarks:["返回一个筛选器函数, 比较参数是否与指定的值相同"],sees:[{guide:"predicate"},{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"selector",types:["function","string","symbol","number"],declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"predicate",types:["function","string","symbol","number"],defaultValue:"defaultExistsPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"function",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},description:"获取一个映射筛选器",remarks:["返回一个筛选器函数, 该筛选器通过判断由 selector 映射传入的参数值后的值是否符合指定的 predicate 条件"],sees:[{guide:"predicate"},{apis:"Enumerable.predicates",property:"exists"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"value",types:["any"]}],returns:{type:"function",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]}]}},description:"获取一个全等筛选器",remarks:["返回一个筛选器函数, 比较参数是否与指定的值全等"],sees:[{guide:"predicate"},{apis:"Enumerable.comparers",property:"strict"}]}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的筛选器",remarks:["该筛选器接受一个元素和该元素所在序列的索引作为参数, 在任何时候都返回 true, 表示满足条件, 通常表示为 defaultPredicate"],sees:[{guide:"predicate"}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"非空筛选器",remarks:["该筛选器接受一个元素和该元素所在序列的索引作为参数, 在参数值不为空( undefined, null )的时候返回 true, 表示满足条件, 通常表示为 defaultExistsPredicate"],sees:[{guide:"predicate"}]}]}},function(e,r){e.exports={type:"object",since:"2.1.15",name:"Enumerable.selectors",properties:[{name:"default",histroys:[{since:"2.1.15",description:"默认的选择器"}]},{name:"key",histroys:[{since:"2.1.15",description:"默认的键选择器"}]},{name:"result",histroys:[{since:"2.1.15",description:"默认的结果选择器"}]},{name:"value",histroys:[{since:"2.1.15",description:"默认的值选择器"}]}],methods:[{name:"property",histroys:[{since:"2.1.15",overloads:[{description:"获取一个属性选择器",parameters:[{name:"property"}]}]}]}]}},function(e,r){e.exports={type:"object",since:"2.1.15"}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"property",types:["string","symbol","number"]}],returns:{type:"function",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]}]}},description:"获取一个属性选择器",remarks:["返回一个一元选择器函数, 该选择器返回输入对象的指定属性值"],sees:[{guide:"selector"}]}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的选择器",remarks:["该选择器是一个一元选择器, 它接受一个输入值, 并返回输入的值本身. 通常表示为 defaultSelector"],sees:[{guide:"selector"}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的键选择器",remarks:["该选择器是一个一元选择器, 它接受一个输入值, 如果输入值为key-value类型结构的数据, 将返回输入值的key值, 否则返回输入的值本身. 通常表示为 defaultKeySelector"],sees:[{guide:"selector"}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的结果选择器",remarks:["该选择器是一个二元选择器, 它接受两个输入值, 并返回第二个参数值. 通常表示为 defaultResultSelector","通常情况下, 此函数的第一个参数为源序列的元素, 第二个参数为需要与第一个序列关联操作的第二个序列的元素或者是一个通过计算得来的与第一个参数有一定联系的数值"],sees:[{guide:"selector"}]}]}},function(e,r){e.exports={histroys:[{type:"function",since:"2.1.15",description:"默认的值选择器",remarks:["该选择器是一个一元选择器, 它接受一个输入值, 如果输入值为key-value类型结构的数据, 将返回输入值的value值, 否则返回输入的值本身. 通常表示为 defaultValueSelector"],sees:[{guide:"selector"}]}]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:[],constructors:{histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"source",types:["any"]}],returns:{type:"IEnumerable"},newInstance:"cannot",description:"通过指定的 source 创建一个 IEnumerable 对象",sees:[{apis:"Enumerable",method:"asEnumerable"}]}]}]}}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{static:!0,parameters:[{name:"source",types:["any"]}],returns:{type:"IEnumerable"},description:"通过指定的 source 创建一个 IEnumerable 对象",remarks:["其中 source 可以是 IEnumerable, Iterator, array, string 甚至 object 对象, 不建议使用 boolean, number 对象"]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{static:!0,parameters:[],returns:{type:"IEnumerable",descriptions:["一个不包含任何元素的序列"]},description:"生成一个空序列",remarks:["此方法通过延迟执行的方式实现"]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{static:!0,parameters:[{name:"start",types:["number"],descriptions:["序列中第一个整数的值"]},{name:"count",types:["number"],descriptions:["要生成的连续整数的数目"]}],returns:{type:"IEnumerable",descriptions:["一个包含范围内连续的整数序列"]},description:"生成指定范围内的整数序列",remarks:["此方法通过延迟执行的方式实现"]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{static:!0,parameters:[{name:"element",types:["any"],descriptions:["要重复的值"]},{name:"count",types:["number"],descriptions:["在生成序列中重复该值的次数"]}],returns:{type:"IEnumerable",descriptions:["一个包含指定数量重复值的序列"]},description:"将生成一个序列, 其中包含指定数量个重复的值",remarks:["此方法通过延迟执行的方式实现"]}]}]}},function(e,r){e.exports={histroys:[{type:"object",static:!0,since:"2.1.15",description:"一个包含了一些常用执行器的对象",sees:[{apis:"Enumerable.actions"}]}]}},function(e,r){e.exports={histroys:[{type:"object",static:!0,since:"2.1.15",description:"一个包含了一些常用比较器的对象",sees:[{apis:"Enumerable.comparers"}]}]}},function(e,r){e.exports={histroys:[{type:"object",static:!0,since:"2.1.15",description:"全局配置",sees:[{apis:"Enumerable.config"}]}]}},function(e,r){e.exports={histroys:[{type:"object",static:!0,since:"2.1.15",description:"一个包含了一些常用筛选器的对象",sees:[{apis:"Enumerable.predicates"}]}]}},function(e,r){e.exports={histroys:[{type:"object",static:!0,since:"2.1.15",description:"一个包含了一些常用选择器的对象",sees:[{apis:"Enumerable.selectors"}]}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:["array"],implements:[],name:"IEnumerable",properties:[{name:"length",histroys:[{since:"2.1.15",override:!0,description:"所包含的元素个数"}]},{name:"size",histroys:[{since:"2.1.15",description:"所包含的元素个数"}]}],methods:[{name:"aggregate",histroys:[{since:"2.1.15",overloads:[{description:"对一个序列应用累加器函数. 将指定的种子值用作累加器的初始值, 并使用指定的函数选择结果值.",parameters:[{name:"seed"},{name:"func"},{name:"resultSelector"}]}]}]},{name:"all",histroys:[{since:"2.1.15",overloads:[{description:"确定是否对序列中的所有元素都满足条件",parameters:[{name:"predicate"}]}]}]},{name:"any",histroys:[{since:"2.1.15",overloads:[{description:"确定序列中是否存在满足条件的元素",parameters:[{name:"predicate"}]}]}]},{name:"asEnumerable",histroys:[{since:"2.1.15",overloads:[{description:"获取一个 IEnumerable 对象",parameters:[]}]}]},{name:"average",histroys:[{since:"2.1.15",overloads:[{description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的平均值",parameters:[{name:"selector"}]}]}]},{name:"concat",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"连接两个序列",parameters:[{name:"other"}]}]}]},{name:"contains",histroys:[{since:"2.1.15",overloads:[{description:"确定使用指定的相等比较器时, 序列是否包含指定的元素",parameters:[{name:"value"},{name:"comparer"}]}]}]},{name:"copyWithin",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"浅复制数组的一部分到同一数组中的另一个位置, 并返回它, 而不修改其大小",parameters:[{name:"target"},{name:"start"},{name:"end"}]}]}]},{name:"count",histroys:[{since:"2.1.15",overloads:[{description:"返回一个数字来表示多少个元素指定序列中的满足条件",parameters:[{name:"predicate"}]}]}]},{name:"defaultIfEmpty",histroys:[{since:"2.1.15",overloads:[{description:"如果源序列为空, 返回包含单一元素的新序列, 否则返回源序列",parameters:[{name:"defaultValue"}]}]}]},{name:"distinct",histroys:[{since:"2.1.15",overloads:[{description:"获取包含源序列中所有非重复元素的新序列",parameters:[{name:"comparer"}]}]}]},{name:"elementAt",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中的指定索引处的元素",parameters:[{name:"index"}]}]}]},{name:"elementAtOrDefault",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中的指定索引处的元素, 如果索引超出范围, 则返回默认值",parameters:[{name:"defaultValue"},{name:"index"}]}]}]},{name:"every",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"测试数组的所有元素是否都通过了指定函数的测试",parameters:[{name:"callback"},{name:"thisArg"}]}]}]},{name:"except",histroys:[{since:"2.1.15",overloads:[{description:"生成两个序列的差集",parameters:[{name:"other"},{name:"comparer"}]}]}]},{name:"fill",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"将一个数组的所有元素从开始索引填充到具有静态值的结束索引",parameters:[{name:"value"},{name:"start"},{name:"end"}]}]}]},{name:"filter",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"使用指定的函数测试所有元素, 并创建一个包含所有通过测试的元素的新数组",parameters:[{name:"callback"},{name:"thisArg"}]}]}]},{name:"find",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"返回数组中满足提供的测试函数的第一个元素的值",parameters:[{name:"callback"},{name:"thisArg"}]}]}]},{name:"findIndex",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"返回数组中满足提供的测试函数的第一个元素的索引",parameters:[{name:"callback"},{name:"thisArg"}]}]}]},{name:"findLast",histroys:[{since:"2.1.17",overloads:[{override:!0,description:"返回数组中满足提供的测试函数的最后一个元素的值",parameters:[{name:"callback"},{name:"thisArg"}]}]}]},{name:"findLastIndex",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"返回数组中满足提供的测试函数的最后一个元素的索引",parameters:[{name:"callback"},{name:"thisArg"}]}]}]},{name:"first",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中满足指定条件的第一个元素",parameters:[{name:"predicate"}]}]}]},{name:"firstOrDefault",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中满足条件的第一个元素. 如果未找到这样的元素, 则返回默认值",parameters:[{name:"defaultValue"},{name:"predicate"}]}]}]},{name:"forEach",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"遍历序列中的每个元素, 使用元素执行指定的操作",parameters:[{name:"action"},{name:"thisArg"}]}]}]},{name:"getEnumerator",histroys:[{since:"2.1.15",overloads:[{description:"获取序列的枚举器",parameters:[]}]}]},{name:"groupBy",histroys:[{since:"2.1.15",overloads:[{description:"根据指定的键选择器函数对序列中的元素进行分组, 并且从每个组及其键中创建结果值. 通过使用指定的比较器对键值进行比较, 并且通过使用指定的函数对每个组的元素进行投影",parameters:[{name:"keySelector"},{name:"elementSelector"},{name:"resultSelector"},{name:"comparer"}]}]}]},{name:"groupJoin",histroys:[{since:"2.1.15",overloads:[{description:"基于匹配键对两个序列的元素关联, 并对结果进行分组, 使用指定的相等比较器对键进行比较",parameters:[{name:"inner"},{name:"resultSelector"},{name:"outerKeySelector"},{name:"innerKeySelector"},{name:"comparer"}]}]}]},{name:"includes",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"用来判断当前数组是否包含某指定的值",parameters:[{name:"element"},{name:"start"}]}]}]},{name:"indexOf",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"返回在数组中可以找到给定元素的第一个索引",parameters:[{name:"element"},{name:"start"},{name:"comparer"}]}]}]},{name:"intersect",histroys:[{since:"2.1.15",overloads:[{description:"生成两个序列的交集",parameters:[{name:"other"},{name:"comparer"}]}]}]},{name:"join",histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"split"}]},{description:"基于匹配键对两个序列的元素关联, 使用指定的相等比较器对键进行比较",parameters:[{name:"inner"},{name:"resultSelector"},{name:"outerKeySelector"},{name:"innerKeySelector"},{name:"comparer"}]}]}]},{name:"last",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中满足指定条件的最后一个元素",parameters:[{name:"predicate"}]}]}]},{name:"lastIndexOf",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"法返回指定元素在数组中的最后一个的索引",parameters:[{name:"element"},{name:"start"},{name:"comparer"}]}]}]},{name:"lastOrDefault",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中满足条件的最后一个元素. 如果未找到这样的元素, 则返回默认值",parameters:[{name:"defaultValue"},{name:"predicate"}]}]}]},{name:"map",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"创建一个新序列, 其结果是该数组中的每个元素调用一个提供的函数",parameters:[{name:"callback"},{name:"thisArg"}]}]}]},{name:"max",histroys:[{since:"2.1.15",overloads:[{description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的最大值",parameters:[{name:"selector"},{name:"comparer"}]}]}]},{name:"min",histroys:[{since:"2.1.15",overloads:[{description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的最小值",parameters:[{name:"selector"},{name:"comparer"}]}]}]},{name:"ofType",histroys:[{since:"2.1.15",overloads:[{description:"根据指定的类型筛选出的新序列",parameters:[{name:"type"}]}]}]},{name:"orderBy",histroys:[{since:"2.1.15",overloads:[{description:"按使用指定的比较器按升序对序列的元素进行排序",parameters:[{name:"keySelector"},{name:"comparer"}]}]}]},{name:"orderByDescending",histroys:[{since:"2.1.15",overloads:[{description:"按使用指定的比较器按降序对序列的元素进行排序",parameters:[{name:"keySelector"},{name:"comparer"}]}]}]},{name:"pop",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"从数组中删除最后一个元素, 并返回该元素的值",parameters:[]}]}]},{name:"push",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"将一个或多个元素添加到数组的末尾, 并返回数组的新长度",parameters:[{name:"values"}]}]}]},{name:"reduce",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"对累加器和数组的每个值(从左到右)应用一个函数, 以将其聚合为单个值",parameters:[{name:"callback"},{name:"initialValue"}]}]}]},{name:"reduceRight",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"对累加器和数组的每个值(从右到左)应用一个函数, 以将其聚合为单个值",parameters:[{name:"callback"},{name:"initialValue"}]}]}]},{name:"reverse",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"反转序列中元素的顺序",parameters:[]}]}]},{name:"select",histroys:[{since:"2.1.15",overloads:[{description:"将序列中的每个元素投影到新序列",parameters:[{name:"selector"}]}]}]},{name:"selectMany",histroys:[{since:"2.1.16",overloads:[{description:"一个序列的每个元素投影为一个序列, 并将结果展开合并为一个结果序列",parameters:[{name:"collectionSelector"},{name:"resultSelector"}]}]}]},{name:"sequenceEqual",histroys:[{since:"2.1.15",overloads:[{description:"确定两个序列通过使用指定的相等比较器比较它们的元素是否相等",parameters:[{name:"other"},{name:"comparer"}]}]}]},{name:"shift",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"从数组中删除第一个元素, 并返回该元素的值",parameters:[]}]}]},{name:"single",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中满足指定条件的唯一元素. 如果有多个这样的元素存在, 则会引发异常",parameters:[{name:"predicate"}]}]}]},{name:"singleOrDefault",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中满足条件的唯一元素. 如果未找到这样的元素, 则返回默认值. 如果有多个元素满足该条件, 此方法将引发异常",parameters:[{name:"defaultValue"},{name:"predicate"}]}]}]},{name:"skip",histroys:[{since:"2.1.15",overloads:[{description:"跳过指定的数量的序列中的元素，然后返回剩余元素",parameters:[{name:"count"}]}]}]},{name:"skipWhile",histroys:[{since:"2.1.15",overloads:[{description:"跳过序列中指定条件为 true 的元素，然后返回剩余元素",parameters:[{name:"predicate"}]}]}]},{name:"slice",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"将数组的一部分浅拷贝, 返回到从开始到结束(不包括结束)选择的新数组对象",parameters:[{name:"start"},{name:"end"}]}]}]},{name:"some",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"测试数组中的某些元素是否通过了指定函数的测试",parameters:[{name:"callback"},{name:"thisArg"}]}]}]},{name:"sort",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"在适当的位置对数组的元素进行排序, 并返回数组",parameters:[{name:"comparer"}]}]}]},{name:"splice",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"通过删除现有元素和/或添加新元素来更改数组的内容",parameters:[{name:"start"},{name:"count"},{name:"values"}]}]}]},{name:"sum",histroys:[{since:"2.1.15",overloads:[{description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的和值",parameters:[{name:"selector"}]}]}]},{name:"take",histroys:[{since:"2.1.15",overloads:[{description:"从序列的开头返回指定的数量的连续元素",parameters:[{name:"count"}]}]}]},{name:"takeWhile",histroys:[{since:"2.1.15",overloads:[{description:"返回序列中从起始位置开始指定的条件为 true 的连续元素",parameters:[{name:"predicate"}]}]}]},{name:"toArray",histroys:[{since:"2.1.15",overloads:[{description:"使用源序列创建一个数组",parameters:[]}]}]},{name:"toDirectory",histroys:[{since:"2.1.15",overloads:[{description:"根据指定的键选择器函数、 比较器和元素选择器函数创建一个 Directory 对象",parameters:[{name:"keySelector"},{name:"valueSelector"},{name:"comparer"}]}]}]},{name:"toLookup",histroys:[{since:"2.1.15",overloads:[{description:"根据指定的键选择器函数、 比较器和元素选择器函数创建一个 Lookup 对象",parameters:[{name:"keySelector"},{name:"valueSelector"},{name:"comparer"}]}]}]},{name:"toObject",histroys:[{since:"2.1.15",overloads:[{description:"从 IEnumerable 中获取一个对象",parameters:[{name:"keySelector"},{name:"valueSelector"},{name:"comparer"}]}]}]},{name:"union",histroys:[{since:"2.1.15",overloads:[{description:"生成两个序列的并集",parameters:[{name:"other"},{name:"comparer"}]}]}]},{name:"unshift",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"将一个或多个元素添加到数组的开头, 并返回新数组的长度",parameters:[{name:"values"}]}]}]},{name:"where",histroys:[{since:"2.1.15",overloads:[{description:"通过筛选器筛选值序列",parameters:[{name:"predicate"}]}]}]},{name:"zip",histroys:[{since:"2.1.15",overloads:[{description:"通过依次合并元素的方式合并两个序列",parameters:[{name:"other"},{name:"resultSelector"}]}]}]}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:["array"],implements:[]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"seed",types:["any"],descriptions:["累加器的初始值"]},{name:"func",types:["function"],descriptions:["要对每个元素调用的累加器函数"],declare:{returns:{type:"any"},parameters:[{name:"seed",types:["any"]},{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"resultSelector",types:["function","string","symbol","number"],defaultValue:"defaultSelector",descriptions:["将累加器的最终值转换为结果值的函数"],declare:{returns:{type:"any"},parameters:[{name:"result",types:["any"]}]}}],returns:{type:"any",descriptions:["已转换的累加器最终值"]},description:"对一个序列应用累加器函数. 将指定的种子值用作累加器的初始值, 并使用指定的函数选择结果值.",remarks:["此方法可以很容易地通过一系列值执行计算. 此方法的原理是使用 source 中的每一个元素依次调用一次 func, 每次 func 调用时此方法将传递聚合的值(作为第一个参数传递给 func)与该序列中的元素. 参数 seed 的值作为聚合的初始值来使用. func 执行的结果替换之前的聚合的值. 最后一次 func 执行的结果传递给 resultSelector 得到此方法要获取的最终结果。"],sees:[{apis:"IEnumerable",method:"count"},{apis:"IEnumerable",method:"min"},{apis:"IEnumerable",method:"max"},{apis:"IEnumerable",method:"sum"},{apis:"IEnumerable",method:"average"},{apis:"Enumerable.selectors",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb548744(v=vs.110).aspx",title:"Microsoft MSDN"}],examples:[{description:"下面的代码示例演示如何使用 aggregate 应用累加器函数和结果选择器",script:{type:"javascript",href:"1.js"}}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"boolean",descriptions:["如果源序列中的每一个元素都在指定筛选器的检测中返回true或者序列为空,则返回true,否则返回false"]},description:"确定是否对序列中的所有元素都满足条件",remarks:["在循环过程中, 当可以确定的结果时, 循环就会立即停止。"],warnings:["此方法不会返回序列中任何元素, 它只会确认集合中的所有元素是否满足条件"],sees:[{apis:"IEnumerable",method:"any"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb548541(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"boolean",descriptions:["如果源序列中的有任何元素能在指定筛选器的检测中返回true或者序列为空,则返回true,否则返回false"]},description:"确定序列中是否存在满足条件的元素",remarks:["在循环过程中, 当可以确定的结果时, 循环就会立即停止。"],warnings:["此方法不会返回序列中任何元素, 它只会确认集合中是否存在满足条件的元素"],sees:[{apis:"IEnumerable",method:"all"},{apis:"IEnumerable",method:"contains"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb534972(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[],returns:{type:"IEnumerable",descriptions:["一个 IEnumerable 对象"]},description:"获取一个 IEnumerable 对象",remarks:["因为本身已经是 IEnumerable 对象, 所以此方法将返回对象本身"]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"selector",types:["function","string","symbol","number"],descriptions:["应用于每个元素的转换函数"],defaultValue:"defaultSelector",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"number",descriptions:["值序列的平均值"]},description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的平均值",sees:[{apis:"IEnumerable",method:"aggregate"},{apis:"IEnumerable",method:"sum"},{apis:"Enumerable.selectors",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb549067(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"other",types:["IEnumerable","Iterator","array","object","string"],descriptions:["要与源序列连接的另一个序列"]}],returns:{type:"IEnumerable",descriptions:["一个将两个序列所有元素的串联产生的新序列"]},description:"连接两个序列",remarks:["此方法通过延迟执行的方式实现","此方法不用 union 方法因为此方法返回输入序列中的所有原始元素, 而 union 方法只返回唯一元素"],sees:[{apis:"IEnumerable",method:"union"},{href:"https://msdn.microsoft.com/{language}/library/bb302894(v=vs.110).aspx",title:"Microsoft MSDN"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"value",types:["any"],descriptions:["要在序列中定位的值"]},{name:"comparer",types:["function","string","symbol","number"],descriptions:["一个对值进行比较的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"boolean",descriptions:["如果源序列包含具有指定的值的元素, 则返回true, 否则返回false"]},description:"确定使用指定的相等比较器时, 序列是否包含指定的元素",remarks:["只要找到匹配的元素, 将停止循环比较的过程"],sees:[{apis:"IEnumerable",method:"any"},{apis:"Enumerable.comparers",property:"equality"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"target",types:["number"],defaultValue:"0"},{name:"start",types:["number"],defaultValue:"0"},{name:"end",types:["number"],defaultValue:"infinity"}],returns:{type:"IEnumerable"},description:"浅复制数组的一部分到同一数组中的另一个位置, 并返回它, 而不修改其大小",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"number",descriptions:["一个数字，表示序列中满足函数条件的元素数量"]},description:"返回一个数字来表示多少个元素指定序列中的满足条件",sees:[{apis:"IEnumerable",property:"length"},{apis:"IEnumerable",property:"size"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb535181(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"defaultValue",types:["any"],descriptions:["序列为空时要返回的序列所包含的值"]}],returns:{type:"IEnumerable",descriptions:["如果源序列为空, 返回包含单一 defaultValue 元素的新序列, 否则返回源序列"]},description:"如果源序列为空, 返回包含单一元素的新序列, 否则返回源序列",remarks:["此方法通过延迟执行的方式实现","此方法可以用于与 groupJoin 方法结合使用, 生成一个左外部联接"],sees:[{apis:"IEnumerable",method:"groupJoin"},{href:"https://msdn.microsoft.com/{language}/library/bb355419(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于对值进行比较的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"IEnumerable",descriptions:["包含源序列中所有非重复元素的结果序列"]},description:"获取包含源序列中所有非重复元素的新序列",remarks:["此方法通过延迟执行的方式实现"],warnings:["此方法的结果可能是无序的"],sees:[{apis:"Enumerable.comparers",property:"equality"},{href:"https://msdn.microsoft.com/{language}/library/bb338049(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"index",types:["number"],descriptions:["要检索的从零开始的元素索引"]}],returns:{type:"any",descriptions:["源序列中指定位置处的元素"]},description:"返回序列中的指定索引处的元素",remarks:["如果 index 超出范围, 此方法将引发异常. 如果希望 index 超出范围时返回默认值, 请使用 elementAtOrDefault 方法"],sees:[{apis:"IEnumerable",method:"elementAtOrDefault"},{href:"https://msdn.microsoft.com/{language}/library/bb299233(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"defaultValue",types:["any"],descriptions:["如果 index 超出范围时返回的默认值"]},{name:"index",types:["number"],descriptions:["要检索的从零开始的元素索引"]}],returns:{type:"any",descriptions:["如果索引超出源序列中的界限返回 defaultValue, 否则返回源序列中的指定位置处的元素"]},description:"返回序列中的指定索引处的元素, 如果索引超出范围, 则返回默认值",sees:[{apis:"IEnumerable",method:"elementAt"},{href:"https://msdn.microsoft.com/{language}/library/bb494386(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"boolean"},description:"测试数组的所有元素是否都通过了指定函数的测试",sees:[{guide:"predicate"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/every",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"other",types:["IEnumerable","Iterator","array","object","string"],descriptions:["需要在返回序列中移除存在于源序列中的元素序列"]},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于判定两个序列元素的值是否相等的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"IEnumerable",descriptions:["包含这两个序列的元素的差集的序列"]},description:"生成两个序列的差集",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"union"},{apis:"IEnumerable",method:"intersect"},{apis:"Enumerable.comparers",property:"equality"},{href:"https://msdn.microsoft.com/{language}/library/bb336390(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"value",types:["any"]},{name:"start",types:["number"],defaultValue:"0"},{name:"end",types:["number"],defaultValue:"infinity"}],returns:{type:"IEnumerable"},description:"将一个数组的所有元素从开始索引填充到具有静态值的结束索引",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"IEnumerable"},description:"使用指定的函数测试所有元素, 并创建一个包含所有通过测试的元素的新数组",sees:[{guide:"predicate"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"any"},description:"返回数组中满足提供的测试函数的第一个元素的值",sees:[{guide:"predicate"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/find",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"number"},description:"返回数组中满足提供的测试函数的第一个元素的索引",sees:[{guide:"predicate"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.17",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"any"},description:"返回数组中满足提供的测试函数的最后一个元素的值",sees:[{guide:"predicate"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"number"},description:"返回数组中满足提供的测试函数的最后一个元素的索引",sees:[{guide:"predicate"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"any",descriptions:["序列中通过指定函数检测的第一个元素"]},description:"返回序列中满足指定条件的第一个元素",remarks:["如果在源序列中找不到任何匹配的元素, 则会引发异常. 如果希望在找不到任何元素时返回默认值, 请使用 firstOrDefault 方法"],sees:[{apis:"IEnumerable",method:"firstOrDefault"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb535050(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"defaultValue",types:["any"],descriptions:["找不到匹配元素时返回的默认值"]},{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"any",descriptions:["序列中通过指定函数检测的第一个元素. 如果未找到匹配元素, 则返回 defaultValue"]},description:"返回序列中满足条件的第一个元素. 如果未找到这样的元素, 则返回默认值",sees:[{apis:"IEnumerable",method:"first"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb549039(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"action",types:["function","string","symbol","number"],descriptions:["循环的执行体"],defaultValue:"defaultAction",declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"void"},description:"遍历序列中的每个元素, 使用元素执行指定的操作",sees:[{apis:"Enumerable.actions",property:"default"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[],returns:{type:"IEnumerator"},description:"获取序列的枚举器",sees:[{apis:"IEnumerator"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于提取每个元素的键的函数"],defaultValue:"defaultKeySelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"elementSelector",types:["function","string","symbol","number"],descriptions:["用于将每个源元素映射到组中的元素的函数"],defaultValue:"defaultValueSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"resultSelector",types:["function","string","symbol","number"],descriptions:["用于从每个组中创建结果值的函数"],defaultValue:"defaultResultSelector",declare:{returns:{type:"any"},parameters:[{name:"key",types:["any"]},{name:"grouping",types:["IGrouping"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于对键进行比较相等比较器"],defaultValue:"defaultEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"IEnumerable",descriptions:["对一组及其键的投影的结果的集合"]},description:"根据指定的键选择器函数对序列中的元素进行分组, 并且从每个组及其键中创建结果值. 通过使用指定的比较器对键值进行比较, 并且通过使用指定的函数对每个组的元素进行投影",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"selectMany"},{apis:"IEnumerable",method:"groupJoin"},{apis:"Enumerable.selectors",property:"key"},{apis:"Enumerable.selectors",property:"value"},{apis:"Enumerable.selectors",method:"result"},{apis:"Enumerable.comparers",property:"equality"},{href:"https://msdn.microsoft.com/{language}/library/bb535049(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"inner",types:["IEnumerable","Iterator","array","object","string"],descriptions:["要与源序列联接的序列"]},{name:"resultSelector",types:["function"],descriptions:["用于从源序列的元素和联接序列的匹配元素集合中创建结果元素的函数"],declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"grouping",types:["IGrouping"]}]}},{name:"outerKeySelector",types:["function","string","symbol","number"],descriptions:["用于从源序列的每个元素提取联接键的函数"],defaultValue:"defaultKeySelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"innerKeySelector",types:["function","string","symbol","number"],descriptions:["用于从联接序列的每个元素提取联接键的函数"],defaultValue:"defaultKeySelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于对键进行比较相等比较器"],defaultValue:"defaultEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"IEnumerable",descriptions:["通过对两个序列执行分组的联接获得的结果集合"]},description:"基于匹配键对两个序列的元素关联, 并对结果进行分组, 使用指定的相等比较器对键进行比较",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"join"},{apis:"IEnumerable",method:"groupBy"},{apis:"Enumerable.selectors",property:"key"},{apis:"Enumerable.comparers",property:"equality"},{href:"https://msdn.microsoft.com/{language}/library/bb535047(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"element",types:["any"]},{name:"start",types:["number"],defaultValue:"0"}],returns:{type:"boolean"},description:"用来判断当前数组是否包含某指定的值",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"element",types:["any"]},{name:"start",types:["number"],defaultValue:"0"},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultStrictEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"number"},description:"返回在数组中可以找到给定元素的第一个索引",sees:[{apis:"Enumerable.comparers",property:"strict"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"other",types:["IEnumerable","Iterator","array","object","string"],descriptions:["需要在返回序列中返回存在于源序列中的元素序列"]},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于判定两个序列元素的值是否相等的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"IEnumerable",descriptions:["包含这两个序列的元素的交集的序列"]},description:"生成两个序列的交集",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"union"},{apis:"IEnumerable",method:"except"},{apis:"Enumerable.comparers",property:"equality"},{href:"https://msdn.microsoft.com/{language}/library/bb355408(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"split",types:["string"]}],returns:{type:"string"},sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/join",title:"Mozilla MDN"}]},{parameters:[{name:"inner",types:["IEnumerable","Iterator","array","object","string"],descriptions:["要与源序列联接的序列"]},{name:"resultSelector",types:["function"],descriptions:["用于从两个匹配元素创建结果元素的函数"],declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},{name:"outerKeySelector",types:["function","string","symbol","number"],descriptions:["用于从源序列的每个元素提取联接键的函数"],defaultValue:"defaultKeySelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"innerKeySelector",types:["function","string","symbol","number"],descriptions:["用于从联接序列的每个元素提取联接键的函数"],defaultValue:"defaultKeySelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于对键进行比较相等比较器"],defaultValue:"defaultEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"IEnumerable",descriptions:["通过对两个序列执行内部联接获得的结果集合"]},description:"基于匹配键对两个序列的元素关联, 使用指定的相等比较器对键进行比较",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"groupJoin"},{apis:"Enumerable.selectors",property:"key"},{apis:"Enumerable.comparers",property:"equality"},{href:"https://msdn.microsoft.com/{language}/library/bb549267(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"any",descriptions:["序列中通过指定函数检测的最后一个元素"]},description:"返回序列中满足指定条件的最后一个元素",remarks:["如果在源序列中找不到任何匹配的元素, 则会引发异常. 如果希望在找不到任何元素时返回默认值, 请使用 lastOrDefault 方法"],sees:[{apis:"IEnumerable",method:"lastOrDefault"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb549138(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"element",types:["any"]},{name:"start",types:["number"],defaultValue:"0"},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultStrictEqualityComparer",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"number"},description:"法返回指定元素在数组中的最后一个的索引",sees:[{apis:"Enumerable.comparers",property:"strict"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"defaultValue",types:["any"],descriptions:["找不到匹配元素时返回的默认值"]},{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"any",descriptions:["序列中通过指定函数检测的最后一个元素, 如果未找到匹配元素, 则返回 defaultValue"]},description:"返回序列中满足条件的最后一个元素. 如果未找到这样的元素, 则返回默认值",sees:[{apis:"IEnumerable",method:"last"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb548915(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"IEnumerable"},description:"创建一个新序列, 其结果是该数组中的每个元素调用一个提供的函数",sees:[{guide:"selector"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/map",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{generics:[{name:"TResult",wheres:[{type:"number"},{type:"string"},{type:"IComparable"}],descriptions:["用于计算的最大值的可比较的结果类型"]}],parameters:[{name:"selector",types:["function","string","symbol","number"],descriptions:["应用于每个元素的转换函数"],defaultValue:"defaultSelector",declare:{returns:{type:"TResult"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于比较每个元素大小的大小比较器"],defaultValue:"defaultComparer",declare:{returns:{type:"number"},parameters:[{name:"element",types:["TResult"]},{name:"other",types:["TResult"]}]}}],returns:{type:"TResult",descriptions:["值序列的最大值"]},description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的最大值",sees:[{apis:"IEnumerable",method:"min"},{apis:"Enumerable.selectors",property:"default"},{apis:"Enumerable.comparers",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb548659(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{generics:[{name:"TResult",wheres:[{type:"number"},{type:"string"},{type:"IComparable"}],descriptions:["用于计算的最小值的可比较的结果类型"]}],parameters:[{name:"selector",types:["function","string","symbol","number"],descriptions:["应用于每个元素的转换函数"],defaultValue:"defaultSelector",declare:{returns:{type:"TResult"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于比较每个元素大小的大小比较器"],defaultValue:"defaultComparer",declare:{returns:{type:"number"},parameters:[{name:"element",types:["TResult"]},{name:"other",types:["TResult"]}]}}],returns:{type:"TResult",descriptions:["值序列的最小值"]},description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的最小值",sees:[{apis:"IEnumerable",method:"max"},{apis:"Enumerable.selectors",property:"default"},{apis:"Enumerable.comparers",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb548779(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"type",types:["class","function","string"],descriptions:["筛选序列元素所根据的类型"]}],returns:{type:"IEnumerable",descriptions:["包含输入序列中的元素类型为指定类型的所有元素组成的新序列"]},description:"根据指定的类型筛选出的新序列",remarks:["此方法通过延迟执行的方式实现"],sees:[{href:"https://msdn.microsoft.com/{language}/library/bb360913(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于从元素中提取键的函数"],defaultValue:"defaultSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["键进行大小比较的大小比较器"],defaultValue:"defaultComparer",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"IOrderedEnumerable",descriptions:["元素根据某个键进行升序排序后的结果序列"]},description:"按使用指定的比较器按升序对序列的元素进行排序",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"orderByDescending"},{apis:"IOrderedEnumerable"},{apis:"Enumerable.selectors",property:"default"},{apis:"Enumerable.comparers",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb549422(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于从元素中提取键的函数"],defaultValue:"defaultSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["键进行大小比较的大小比较器"],defaultValue:"defaultComparer",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"IOrderedEnumerable",descriptions:["元素根据某个键进行降序排序后的结果序列"]},description:"按使用指定的比较器按降序对序列的元素进行排序",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"orderBy"},{apis:"IOrderedEnumerable"},{apis:"Enumerable.selectors",property:"default"},{apis:"Enumerable.comparers",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb548916(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[],returns:{type:"any"},description:"从数组中删除最后一个元素, 并返回该元素的值",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"values",types:["any"],params:!0}],returns:{type:"number"},description:"将一个或多个元素添加到数组的末尾, 并返回数组的新长度",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/push",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"seed",types:["any"]},{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"initialValue",types:["any"]}],returns:{type:"IEnumerable"},description:"对累加器和数组的每个值(从左到右)应用一个函数, 以将其聚合为单个值",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"seed",types:["any"]},{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"initialValue",types:["any"]}],returns:{type:"IEnumerable"},description:"对累加器和数组的每个值(从右到左)应用一个函数, 以将其聚合为单个值",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[],returns:{type:"IEnumerable",descriptions:["一个序列，其元素以相反顺序对应于输入序列的元素"]},description:"反转序列中元素的顺序",warnings:["如果开启对 Array 的扩展, 则 Array 对象原生的 reverse 方法也将返回 IEnumerable 对象, 而不只是 Array 对象"],sees:[{href:"https://msdn.microsoft.com/{language}/library/bb358497(v=vs.110).aspx",title:"Microsoft MSDN"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"selector",types:["function","string","symbol","number"],descriptions:["应用于每个元素的转换函数"],declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"IEnumerable",descriptions:["一个序列，其元素以相反顺序对应于输入序列的元素"]},description:"将序列中的每个元素投影到新序列",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"selectMany"},{guide:"selector"},{href:"https://msdn.microsoft.com/{language}/library/bb534869(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.16",overloads:[{parameters:[{name:"collectionSelector",types:["function","string","symbol","number"],descriptions:["要应用于输入序列中的每个元素转换函数"],defaultValue:"defaultSelector",declare:{returns:{type:"IEnumerable"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"resultSelector",types:["function"],descriptions:["要应用于中间序列的每个元素的转换函数"],defaultValue:"defaultResultSelector",declare:{returns:{type:"any"},parameters:[{name:"sourceElement",types:["any"]},{name:"collectionElement",types:["any"]}]}}],returns:{type:"IEnumerable",descriptions:["一对多转换函数对输入序列中的每个元素调用的结果序列"]},description:"一个序列的每个元素投影为一个序列, 并将结果展开合并为一个结果序列",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"select"},{apis:"IEnumerable",method:"groupBy"},{apis:"Enumerable.selectors",property:"default"},{apis:"Enumerable.selectors",method:"result"},{href:"https://msdn.microsoft.com/{language}/library/bb534732(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"other",types:["IEnumerable","Iterator","array","object","string"],descriptions:["应用于每个元素的转换函数"]},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于对值进行比较的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"boolean",descriptions:["如果两个源序列的长度相等, 并且其相应元素根据 comparer 比较器比较的结果都为相等, 则返回true, 否则返回 false"]},description:"确定两个序列通过使用指定的相等比较器比较它们的元素是否相等",sees:[{apis:"Enumerable.comparers",property:"equality"},{href:"https://msdn.microsoft.com/{language}/library/bb342073(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[],returns:{type:"any"},description:"从数组中删除第一个元素, 并返回该元素的值",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"any",descriptions:["序列中通过指定函数检测的唯一个元素"]},description:"返回序列中满足指定条件的唯一元素. 如果有多个这样的元素存在, 则会引发异常",remarks:["如果在源序列中找不到任何匹配的元素, 则会引发异常. 如果希望在找不到任何元素时返回默认值, 请使用 singleOrDefault 方法"],sees:[{apis:"IEnumerable",method:"singleOrDefault"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb535118(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"defaultValue",types:["any"],descriptions:["找不到匹配元素时返回的默认值"]},{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"any",descriptions:["序列中通过指定函数检测的唯一元素. 如果未找到匹配元素, 则返回 defaultValue"]},description:"返回序列中满足条件的唯一元素. 如果未找到这样的元素, 则返回默认值. 如果有多个元素满足该条件, 此方法将引发异常",sees:[{apis:"IEnumerable",method:"single"},{apis:"Enumerable.predicates",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb549274(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"count",types:["number"],descriptions:["返回剩余元素前要跳过的元素数量"]}],returns:{type:"IEnumerable",descriptions:["包含输入序列中的指定索引后出现的所有元素的新序列"]},description:"跳过指定的数量的序列中的元素，然后返回剩余元素",remarks:["此方法通过延迟执行的方式实现","如果源序列中元素的个数少于count个, 则返回空序列","如果count小于或等于0, 则返回包含全部源序列元素的新序列"],sees:[{apis:"IEnumerable",method:"skipWhile"},{apis:"IEnumerable",method:"take"},{href:"https://msdn.microsoft.com/{language}/library/bb358985(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"IEnumerable",descriptions:["跳过从源序列第一个元素开始, 连续的所有执行 predicate 检测返回 true 的元素, 后剩余的元素组成的序列"]},description:"跳过序列中指定条件为 true 的元素，然后返回剩余元素",remarks:["此方法通过延迟执行的方式实现","如果源序列中所有元素执行 predicate 检测时都返回 true, 则返回空序列"],sees:[{apis:"IEnumerable",method:"skip"},{apis:"IEnumerable",method:"takeWhile"},{guide:"predicate"},{href:"https://msdn.microsoft.com/{language}/library/bb549288(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"start",types:["number"],defaultValue:"0"},{name:"end",types:["number"],defaultValue:"infinity"}],returns:{type:"IEnumerable"},description:"将数组的一部分浅拷贝, 返回到从开始到结束(不包括结束)选择的新数组对象",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"callback",types:["function","string","symbol","number"],declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"boolean"},description:"测试数组中的某些元素是否通过了指定函数的测试",sees:[{guide:"predicate"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/some",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultComparer",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"number"},description:"在适当的位置对数组的元素进行排序, 并返回数组",sees:[{apis:"Enumerable.comparers",property:"default"},{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"start",types:["number"]},{name:"count",types:["number"],defaultValue:"infinity"},{name:"values",types:["any"],params:!0}],returns:{type:"IEnumerable"},description:"通过删除现有元素和/或添加新元素来更改数组的内容",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"selector",types:["function","string","symbol","number"],descriptions:["应用于每个元素的转换函数"],defaultValue:"defaultSelector",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"number",descriptions:["值序列的和值"]},description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的和值",sees:[{apis:"IEnumerable",method:"average"},{apis:"Enumerable.selectors",property:"default"},{href:"https://msdn.microsoft.com/{language}/library/bb549046(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"count",types:["number"],descriptions:["要返回的元素数量"]}],returns:{type:"IEnumerable",descriptions:["包含从输入序列的起始位置开始, 指定的数量的连续元素组成的新序列"]},description:"从序列的开头返回指定的数量的连续元素",remarks:["此方法通过延迟执行的方式实现","如果源序列中元素的个数少于count个, 则返回包含全部源序列元素的新序列","如果count小于或等于0, 则返回空序列"],sees:[{apis:"IEnumerable",method:"skip"},{apis:"IEnumerable",method:"takeWhile"},{href:"https://msdn.microsoft.com/{language}/library/bb503062(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"IEnumerable",descriptions:["包含输入序列中出现检测不能够通过在元素之前的所有元素组成的新序列"]},description:"返回序列中从起始位置开始指定的条件为 true 的连续元素",remarks:["此方法通过延迟执行的方式实现","如果源序列中第一个元素执行 predicate 检测时返回 false, 则返回空序列"],sees:[{apis:"IEnumerable",method:"skipWhile"},{apis:"IEnumerable",method:"take"},{guide:"predicate"},{href:"https://msdn.microsoft.com/{language}/library/bb548775(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[],returns:{type:"array",descriptions:["一个包含输入序列中的所有元素的数组"]},description:"使用源序列创建一个数组",sees:[{href:"https://msdn.microsoft.com/{language}/library/bb298736(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于提取每个元素的键的函数"],defaultValue:"defaultSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"valueSelector",types:["function","string","symbol","number"],descriptions:["用于从每个元素产生结果元素值的转换函数"],defaultValue:"defaultSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"Directory",descriptions:["根据指定的键选择器函数、 比较器和元素选择器函数创建的 Directory 对象"]},description:"根据指定的键选择器函数、 比较器和元素选择器函数创建一个 Directory 对象",sees:[{apis:"IEnumerable",method:"toObject"},{apis:"Enumerable.selectors",property:"default"},{apis:"Enumerable.comparers",property:"same"},{apis:"Directory"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于提取每个元素的键的函数"],defaultValue:"defaultSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"valueSelector",types:["function","string","symbol","number"],descriptions:["用于从每个元素产生结果元素值的转换函数"],defaultValue:"defaultSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"Lookup",descriptions:["根据指定的键选择器函数、 比较器和元素选择器函数创建的 Lookup 对象"]},description:"根据指定的键选择器函数、 比较器和元素选择器函数创建一个 Lookup 对象",sees:[{apis:"Lookup"},{apis:"Enumerable.selectors",property:"default"},{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于提取每个元素的键的函数"],defaultValue:"defaultKeySelector",declare:{returns:{type:"string"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"valueSelector",types:["function","string","symbol","number"],descriptions:["用于从每个元素产生结果元素值的转换函数"],defaultValue:"defaultValueSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["string"]},{name:"other",types:["string"]}]}}],returns:{type:"any",descriptions:["提取出的 Object 对象"]},description:"从 IEnumerable 中获取一个对象",sees:[{apis:"IEnumerable",method:"toDirectory"},{apis:"Enumerable.selectors",property:"key"},{apis:"Enumerable.selectors",property:"value"},{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"other",types:["IEnumerable","Iterator","array","object","string"],descriptions:["构成并集的第二个序列"]},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于判定两个序列元素的值是否相等的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"IEnumerable",descriptions:["包含这两个序列的元素的并集的序列"]},description:"生成两个序列的并集",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"union"},{apis:"IEnumerable",method:"intersect"},{apis:"Enumerable.comparers",property:"equality"},{href:"https://msdn.microsoft.com/{language}/library/bb358407(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"values",types:["any"],params:!0}],returns:{type:"number"},description:"将一个或多个元素添加到数组的开头, 并返回新数组的长度",sees:[{href:"https://developer.mozilla.org/{language}/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",title:"Mozilla MDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"IEnumerable",descriptions:["包含输入序列中所有满足条件的元素组成的新序列"]},description:"通过筛选器筛选值序列",remarks:["此方法通过延迟执行的方式实现"],sees:[{guide:"predicate"},{href:"https://msdn.microsoft.com/{language}/library/bb549418(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"other",types:["IEnumerable","Iterator","array","object","string"],descriptions:["要合并的第二个序列"]},{name:"resultSelector",types:["function"],descriptions:["一个指定如何合并来自两个序列的元素的函数"],declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"IEnumerable",descriptions:["包含合并的两个输入序列的元素组成的新序列"]},description:"通过依次合并元素的方式合并两个序列",remarks:["此方法通过延迟执行的方式实现"],sees:[{guide:"selector"},{href:"https://msdn.microsoft.com/{language}/library/bb548775(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{type:"number",since:"2.1.15",override:!0,description:"所包含的元素个数",sees:[{apis:"IEnumerable",property:"size"},{apis:"IEnumerable",method:"count"}]}]}},function(e,r){e.exports={histroys:[{type:"number",since:"2.1.15",description:"所包含的元素个数",sees:[{apis:"IEnumerable",property:"length"},{apis:"IEnumerable",method:"count"}]}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:[],implements:[],name:"IEnumerator",properties:[{name:"current",histroys:[{since:"2.1.15",description:"当前游标所指向的元素"}]}],methods:[{name:"moveNext",histroys:[{since:"2.1.15",overloads:[{description:"将游标移动到下一个元素, 并返回状态",parameters:[]}]}]},{name:"reset",histroys:[{since:"2.1.15",overloads:[{description:"重置 IEnumerator 对象, 将游标只想第一个元素",parameters:[]}]}]}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:[],implements:[]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[],returns:{type:"boolean",descriptions:["如果游标成功移动至下一个元素, 则返回true, 否则返回false"]},description:"将游标移动到下一个元素, 并返回状态"}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[],returns:{type:"void"},description:"重置 IEnumerator 对象, 将游标只想第一个元素"}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",description:"当前游标所指向的元素"}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:["IEnumerable"],implements:[],name:"IGrouping",properties:[{name:"key",histroys:[{since:"2.1.15",description:"此分组的key"}]}],methods:[]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:["IEnumerable"],implements:[]}},function(e,r){e.exports={histroys:[{type:"any",since:"2.1.15",description:"此分组的key"}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:["IEnumerable"],implements:[],name:"IMapEnumerable",properties:[],methods:[{name:"forEach",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"遍历序列中的每个元素, 使用元素执行指定的操作",parameters:[{name:"action"},{name:"thisArg"}]}]}]},{name:"toDirectory",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"根据指定的键选择器函数、 比较器和元素选择器函数创建一个 Directory 对象",parameters:[{name:"keySelector"},{name:"valueSelector"},{name:"comparer"}]}]}]},{name:"toLookup",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"根据指定的键选择器函数、 比较器和元素选择器函数创建一个 Lookup 对象",parameters:[{name:"keySelector"},{name:"valueSelector"},{name:"comparer"}]}]}]}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:["IEnumerable"],implements:[]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"action",types:["function","string","symbol","number"],descriptions:["循环的执行体"],defaultValue:"defaultAction",declare:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"key",types:["any"]},{name:"source",types:["IEnumerable"]}]}},{name:"thisArg",types:["any"]}],returns:{type:"void"},description:"遍历序列中的每个元素, 使用元素执行指定的操作",sees:[{apis:"IEnumerable",method:"forEach"},{apis:"Enumerable.actions",property:"default"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于提取每个元素的键的函数"],defaultValue:"defaultKeySelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"valueSelector",types:["function","string","symbol","number"],descriptions:["用于从每个元素产生结果元素值的转换函数"],defaultValue:"defaultValueSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"Directory",descriptions:["根据指定的键选择器函数、 比较器和元素选择器函数创建的 Directory 对象"]},description:"根据指定的键选择器函数、 比较器和元素选择器函数创建一个 Directory 对象",sees:[{apis:"IEnumerable",method:"toDirectory"},{apis:"Enumerable.selectors",property:"key"},{apis:"Enumerable.selectors",property:"value"},{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于提取每个元素的键的函数"],defaultValue:"defaultKeySelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"valueSelector",types:["function","string","symbol","number"],descriptions:["用于从每个元素产生结果元素值的转换函数"],defaultValue:"defaultValueSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"Lookup",descriptions:["根据指定的键选择器函数、 比较器和元素选择器函数创建的 Lookup 对象"]},description:"根据指定的键选择器函数、 比较器和元素选择器函数创建一个 Lookup 对象",sees:[{apis:"IEnumerable",method:"toLookup"},{apis:"Enumerable.selectors",property:"key"},{apis:"Enumerable.selectors",property:"value"},{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:["IEnumerable"],implements:[],name:"IOrderedEnumerable",properties:[],methods:[{name:"thenBy",histroys:[{since:"2.1.15",overloads:[{description:"执行后续排序中使用指定的比较器按升序对序列的元素",parameters:[{name:"keySelector"},{name:"comparer"}]}]}]},{name:"thenByDescending",histroys:[{since:"2.1.15",overloads:[{description:"执行后续排序中使用指定的比较器按降序对序列的元素",parameters:[{name:"keySelector"},{name:"comparer"}]}]}]}]}},function(e,r){e.exports={type:"interface",since:"2.1.15",extends:["IEnumerable"],implements:[]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于从元素中提取键的函数"],defaultValue:"defaultSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["键进行大小比较的大小比较器"],defaultValue:"defaultComparer",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"IOrderedEnumerable",descriptions:["元素根据某个键进行升序排序后的结果序列"]},description:"执行后续排序中使用指定的比较器按升序对序列的元素",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"orderBy"},{href:"https://msdn.microsoft.com/{language}/library/bb534500(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{parameters:[{name:"keySelector",types:["function","string","symbol","number"],descriptions:["用于从元素中提取键的函数"],defaultValue:"defaultSelector",declare:{returns:{type:"any"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"comparer",types:["function","string","symbol","number"],descriptions:["键进行大小比较的大小比较器"],defaultValue:"defaultComparer",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"IOrderedEnumerable",descriptions:["元素根据某个键进行降序排序后的结果序列"]},description:"执行后续排序中使用指定的比较器按降序对序列的元素",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"orderByDescending"},{href:"https://msdn.microsoft.com/{language}/library/bb534489(v=vs.110).aspx",title:"Microsoft MSDN"}]}]}]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:["Directory"],name:"Lookup",properties:[],methods:[{name:"get",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"通过指定的相等比较器查找指定键对应的序列",parameters:[{name:"key"},{name:"comparer"}]}]}]},{name:"set",histroys:[{since:"2.1.15",overloads:[{override:!0,description:"通过指定的相等比较器为指定键设置对应的序列",parameters:[{name:"key"},{name:"value"},{name:"comparer"}]}]}]}]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:["Directory"]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"key",types:["any"],descriptions:["用于查找的键"]},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"IEnumerable",descriptions:["键所对应的序列"]},description:"通过指定的相等比较器查找指定键对应的序列",sees:[{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={histroys:[{since:"2.1.15",overloads:[{override:!0,parameters:[{name:"key",types:["any"],descriptions:["用于查找的键"]},{name:"value",types:["IEnumerable","Iterator","array","object","string"],descriptions:["要设置的序列"]},{name:"comparer",types:["function","string","symbol","number"],defaultValue:"defaultSameComparer",descriptions:["用于对键进行比较相等比较器"],declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}}],returns:{type:"any",descriptions:["返回 Directory 对象本身"]},description:"通过指定的相等比较器为指定键设置对应的序列",sees:[{apis:"Enumerable.comparers",property:"same"}]}]}]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:[],name:"Plugin",properties:[],methods:[]}},function(e,r){e.exports={type:"class",since:"2.1.15",extends:[],implements:[]}},function(e,r){e.exports={class:"类",interface:"接口",object:"对象",constructor:"构造方法",constructors:"构造方法",property:"属性",properties:"属性",method:"方法",methods:"方法",since:"最低版本",deprecated:"最高版本",override:"重写",details:"详情",description:"描述",summary:"摘要",warning:"注意",warnings:"注意",remark:"备注",remarks:"备注",example:"示例",examples:"示例",static:"静态的",see:"参考",declare:"声明",parameters:"参数",parameter:"参数",returns:"返回值",generics:"类型参数",apis:"API文档",guide:"教程",publish:"发布",time:"时间",date:"日期",prepublish:"预发布",version:"版本",author:"作者",email:"邮箱",project:"项目",newInstance:{only:"只能使用new运算符",both:"可以使用new运算符,也可以直接调用",cannot:"不能使用new运算符"}}},function(e,r){e.exports=[{publish:"2017-03-27",contents:["优化了部分代码结构","新增 对 arrayComparer 的默认支持","新增了 对绝大部分 selector, predicate, comparer 参数校验","新增 绝大部分的 selector, predicate, comparer 参数均支持 String 或 Symbol 类型数据 表示选择对象对应的字段 的功能","新增 Enumerable.predicates.exists 属性, 表示非空筛选器","新增 Enumerable.predicates.regexp 方法, 生成正则匹配的筛选器","新增 Enumerable.predicates.not 方法, 生成逻辑非筛选器","新增 Enumerable.predicates.selector 方法, 生成选择筛选器","新增 Enumerable.predicates.equality, Enumerable.predicates.strict, Enumerable.predicates.same 方法, 生成比较筛选器"],version:"2.1.15"},{publish:"2017-04-05",contents:["优化 selectMany 方法, 使的使用上更接近linq原生的方法. 修复 selectMany 方法 collectionSelector 返回 Iterator,string,object 对象是出现异常的bug","修改 defaultGroupResultSelector 为 defaultResultSelector, 修改 Enumerable.selectors.groupResult 为 Enumerable.selectors.result","修改 selectMany 方法的 resultSelector 参数的结构和默认值, 与 defaultResultSelector 一致","增加 zip 方法的 resultSelector 的默认值为 defaultResultSelector"],version:"2.1.16"},{prepublish:!0,contents:["新增 findLast 方法","新增 Enumerable.comparers.greater 方法","新增 Enumerable.comparers.less 方法","新增 Enumerable.predicates.properties 方法, 生成一个属性筛选器","新增所有的 predicate 参数, 如果使用 Array 或者 Object 类型作为参数时, 自动经过 Enumerable.predicates.properties 方法转译成一个筛选器","优化 comparer / predicate / selector 类型的参数 转化过程的效率"],version:"2.1.17.pre"}]},function(e,r){e.exports={publish:"2017-03-27",contents:["优化了部分代码结构","新增 对 arrayComparer 的默认支持","新增了 对绝大部分 selector, predicate, comparer 参数校验","新增 绝大部分的 selector, predicate, comparer 参数均支持 String 或 Symbol 类型数据 表示选择对象对应的字段 的功能","新增 Enumerable.predicates.exists 属性, 表示非空筛选器","新增 Enumerable.predicates.regexp 方法, 生成正则匹配的筛选器","新增 Enumerable.predicates.not 方法, 生成逻辑非筛选器","新增 Enumerable.predicates.selector 方法, 生成选择筛选器","新增 Enumerable.predicates.equality, Enumerable.predicates.strict, Enumerable.predicates.same 方法, 生成比较筛选器"]}},function(e,r){e.exports={publish:"2017-04-05",contents:["优化 selectMany 方法, 使的使用上更接近linq原生的方法. 修复 selectMany 方法 collectionSelector 返回 Iterator,string,object 对象是出现异常的bug","修改 defaultGroupResultSelector 为 defaultResultSelector, 修改 Enumerable.selectors.groupResult 为 Enumerable.selectors.result","修改 selectMany 方法的 resultSelector 参数的结构和默认值, 与 defaultResultSelector 一致","增加 zip 方法的 resultSelector 的默认值为 defaultResultSelector"]}},function(e,r){e.exports={prepublish:!0,contents:["新增 findLast 方法","新增 Enumerable.comparers.greater 方法","新增 Enumerable.comparers.less 方法","新增 Enumerable.predicates.properties 方法, 生成一个属性筛选器","新增所有的 predicate 参数, 如果使用 Array 或者 Object 类型作为参数时, 自动经过 Enumerable.predicates.properties 方法转译成一个筛选器","优化 comparer / predicate / selector 类型的参数 转化过程的效率"]}},function(e,r){e.exports=[{code:"introduction",title:"简介"},{code:"install",title:"安装"},{code:"guides",title:"教程",children:[{code:"instance",title:"获取 IEnumerable 实例",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"config",title:"配置",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"selector",title:"选择器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"predicate",title:"筛选器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"comparer",title:"比较器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"action",title:"执行器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"iterator",title:"迭代器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"enumerator",title:"枚举器",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"extend",title:"扩展",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"plugin",title:"插件",since:"2.1.15",deprecated:"2.1.17.pre"}]},{code:"apis",title:"API文档",children:[{code:"Directory",title:"Directory 类",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Entry",title:"Entry 类",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable",title:"Enumerable 类",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.actions",title:"Enumerable.actions 对象",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.comparers",title:"Enumerable.comparers 对象",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.config",title:"Enumerable.config 对象",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.predicates",title:"Enumerable.predicates 对象",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Enumerable.selectors",title:"Enumerable.selectors 对象",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IEnumerable",title:"IEnumerable 接口",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IEnumerator",title:"IEnumerator 接口",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IGrouping",title:"IGrouping 接口",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IMapEnumerable",title:"IMapEnumerable 接口",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"IOrderedEnumerable",title:"IOrderedEnumerable 接口",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Lookup",title:"Lookup 类",since:"2.1.15",deprecated:"2.1.17.pre"},{code:"Plugin",title:"Plugin 类",since:"2.1.15",deprecated:"2.1.17.pre"}]},{code:"change",title:"更新日志"},{code:"about",title:"关于"}]},function(e,r){e.exports=[{code:"introduction",title:"简介"},{code:"install",title:"安装"},"guides","apis",{code:"change",title:"更新日志"},{code:"about",title:"关于"}]},function(e,r){e.exports={title:"执行器",contents:[{title:"什么是执行器",descriptions:[{type:"description",content:"执行器是一个仅对输入值执行一系列计算的函数"},{type:"description",content:"通常一个执行器接受一个参数值, 或者额外接受输入值所在的序列中的索引作为第二个参数, 执行一系列计算, 但无需返回任何数值"},{type:"function",content:{returns:{type:"void"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"],optional:!0}]}}]}]}},function(e,r){e.exports={title:"比较器",contents:[{title:"什么是比较器",descriptions:[{type:"description",content:"比较器是一个反映两个输入值之间关系的函数"}]},{title:"大小比较器",descriptions:[{type:"description",content:"大小比较器是一个反映两个输入值之间大小关系的比较器"},{type:"function",content:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},{type:"see",content:{apis:"Enumerable.comparers",property:"default"}}]},{title:"相等比较器",descriptions:[{type:"description",content:"相等比较器是一个反映两个输入值是否相等的比较器"},{type:"function",content:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}]}},{type:"see",content:{apis:"Enumerable.comparers",property:"equality"}}]}]}},function(e,r){e.exports={title:"配置",contents:[{title:"配置获取 IEnumerable 对象的方法",descriptions:[{type:"description",content:"默认的获取 IEnumerable 对象的方法名为 asEnumerable, 通过 config.as 属性可以修改此方法名"},{type:"example",content:{type:"javascript",href:"config.as.js"}},{type:"warning",content:"修改后 asEnumerable 方法依然有效"}]},{title:"配置内置对象的扩展",descriptions:[{type:"description",content:"使用如下方式可以对javascript中原生的对象进行扩展"},{type:"example",content:{type:"javascript",href:"config.extends.js"}}]}]}},function(e,r){e.exports={title:"枚举器",contents:[{title:"什么是枚举器",descriptions:[]}]}},function(e,r){e.exports={title:"扩展",contents:[{title:"为什么需要扩展",descriptions:[]},{title:"扩展对象",descriptions:[]}]}},function(e,r){e.exports={title:"获取 IEnumerable 实例",contents:[{title:"通过 Enumerable 构造方法获取",descriptions:[{type:"description",content:"可以通过 Enumerable 类的构造方法获取一个 IEnumerable 对象"},{type:"example",content:{type:"javascript",href:"Enumerable.js"}},{type:"see",content:{apis:"Enumerable",constructor:!0}}]},{title:"通过 Enumerable.asEnumerable 方法获取",descriptions:[{type:"example",content:{type:"javascript",href:"Enumerable.asEnumerable.js"}},{type:"see",content:{apis:"Enumerable",method:"asEnumerable"}}]},{title:"通过 asEnumerable 方法获取",descriptions:[{type:"description",content:"引入linq-js后, 任何对象都包含一个 asEnumerable 方法, 可以直接获取一个 IEnumerable 对象"},{type:"example",content:{type:"javascript",href:"asEnumerable.js"}}]}]}},function(e,r){e.exports={title:"迭代器",contents:[{title:"什么是迭代器",descriptions:[]},{title:"ES6中的迭代器",descriptions:[]},{title:"迭代器的 asEnumerable 方法",descriptions:[{type:"description",content:"迭代器也存在 asEnumerable 方法, 同样返回一个 IEnumerable 对象. 由于遍历器的特殊性, 通过遍历器的 asEnumerable 方法获得的 IEnumerable 对象的元素只能被迭代一次, 或者其延迟执行的方法只能被执行一次"}]}]}},function(e,r){e.exports={title:"插件",contents:[{title:"什么是插件",descriptions:[]},{title:"添加插件",descriptions:[]},{title:"移除插件",descriptions:[]}]}},function(e,r){e.exports={title:"筛选器",contents:[{title:"什么是筛选器",descriptions:[{type:"description",content:"筛选器是一个判断输入参数是否满足条件的函数"},{type:"description",content:"通常一个筛选器接受一个参数值, 或者额外接受输入值所在的序列中的索引作为第二个参数, 返回一个 boolean 值表示该参数或与其索引是否满足指定的条件"},{type:"function",content:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"],optional:!0}]}}]}]}},function(e,r){e.exports={title:"选择器",contents:[{title:"什么是选择器",descriptions:[{type:"description",content:"选择器是一个将输入值映射到一个输出值的函数"},{type:"description",content:"该函数接受一个或多个输入值, 有些情况下还接受输入值所在序列中的索引作为参数, 经过一系列自定义的运算, 最终返回一个对应的值, 返回值通常用来组成新的序列或进行其他运算"}]},{title:"一元选择器",descriptions:[{type:"function",content:{returns:{type:"any"},parameters:[{types:["any"],name:"element"},{types:["number"],name:"index",optional:!0}]}},{type:"see",content:{apis:"Enumerable.selectors",property:"default"}}]},{title:"二元选择器",descriptions:[{type:"function",content:{returns:{type:"any"},parameters:[{types:["any"],name:"first"},{types:["any"],name:"second"},{types:["number"],name:"index",optional:!0}]}}]}]}},function(e,r){e.exports={icon:"",code:"install",title:"安装",contents:[{code:"addIn",title:"添加至项目",details:[{type:"example",runtime:"Node JS",scripts:[{type:"bash",script:"$ npm install --save linq-js"}]},{type:"example",runtime:"Bower",scripts:[{type:"bash",script:"$ bower install js-linq"}]}]},{code:"require",title:"引入",details:[{type:"example",scripts:[{type:"javascript",script:"const Enumerable = require('linq-js');"}],remarks:["说明:本module依赖于ES6,建议项目在中使用ES6,以下案例中将均使用ES6写法"]}]}]}},function(e,r){e.exports={code:"introduction",title:"简介",contents:["在javascript(ES6标准)中使用linq与lambda","&nbsp;","在1.0.0中使用了字符串的lambda表达式,过于繁琐,并且不支持延迟操作","从2.1.0开始整体代码重新编写,使用全新的ES6的特性,性能更好,同时对数据的操作是延时操作,占用更少"]}},function(e,r){e.exports={name:"中文版"}}]);
webpackJsonp([0],[,,,,,,,,,,,,,,,,function(e,s,n){function r(e){return n(t(e))}function t(e){var s=a[e];if(!(s+1))throw new Error("Cannot find module '"+e+"'.");return s}var a={"./en-us/apis/Enumerable.json":52,"./en-us/caption.json":53,"./en-us/directory.json":54,"./en-us/install.json":55,"./en-us/introduction.json":56,"./en-us/meta.json":57,"./examples/IEnumerable.json":58,"./examples/IEnumerable/methods/aggregate.json":59,"./lang.json":14,"./zh-hans/apis/Enumerable.json":60,"./zh-hans/apis/Enumerable/meta.json":61,"./zh-hans/apis/Enumerable/methods/asEnumerable.json":62,"./zh-hans/apis/Enumerable/properties/comparers.json":63,"./zh-hans/apis/Enumerable/properties/config.json":64,"./zh-hans/apis/Enumerable/properties/predicates.json":65,"./zh-hans/apis/Enumerable/properties/selectors.json":66,"./zh-hans/apis/IEnumerable.json":67,"./zh-hans/apis/IEnumerable/meta.json":68,"./zh-hans/apis/IEnumerable/methods/aggregate.json":69,"./zh-hans/apis/IEnumerable/methods/all.json":70,"./zh-hans/apis/IEnumerable/methods/any.json":71,"./zh-hans/apis/IEnumerable/methods/asEnumerable.json":72,"./zh-hans/apis/IEnumerable/methods/average.json":73,"./zh-hans/apis/IEnumerable/methods/concat.json":74,"./zh-hans/apis/IEnumerable/methods/contains.json":75,"./zh-hans/apis/IEnumerable/methods/count.json":76,"./zh-hans/apis/IEnumerable/methods/defaultIfEmpty.json":77,"./zh-hans/apis/IEnumerable/methods/distinct.json":78,"./zh-hans/apis/IEnumerable/methods/elementAt.json":79,"./zh-hans/apis/IEnumerable/methods/elementAtOrDefault.json":80,"./zh-hans/apis/IEnumerable/methods/except.json":81,"./zh-hans/apis/IEnumerable/methods/first.json":82,"./zh-hans/apis/IEnumerable/methods/firstOrDefault.json":83,"./zh-hans/apis/IEnumerable/properties/length.json":84,"./zh-hans/apis/IEnumerable/properties/size.json":85,"./zh-hans/caption.json":86,"./zh-hans/directory.json":87,"./zh-hans/install.json":88,"./zh-hans/introduction.json":89,"./zh-hans/meta.json":90};r.keys=function(){return Object.keys(a)},r.resolve=t,e.exports=r,r.id=16},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,s,n){function r(e){return n(t(e))}function t(e){var s=a[e];if(!(s+1))throw new Error("Cannot find module '"+e+"'.");return s}var a={"./resources/en-us/apis/Enumerable.json":52,"./resources/en-us/caption.json":53,"./resources/en-us/directory.json":54,"./resources/en-us/install.json":55,"./resources/en-us/introduction.json":56,"./resources/en-us/meta.json":57,"./resources/examples/IEnumerable.json":58,"./resources/examples/IEnumerable/methods/aggregate.json":59,"./resources/lang.json":14,"./resources/zh-hans/apis/Enumerable.json":60,"./resources/zh-hans/apis/Enumerable/meta.json":61,"./resources/zh-hans/apis/Enumerable/methods/asEnumerable.json":62,"./resources/zh-hans/apis/Enumerable/properties/comparers.json":63,"./resources/zh-hans/apis/Enumerable/properties/config.json":64,"./resources/zh-hans/apis/Enumerable/properties/predicates.json":65,"./resources/zh-hans/apis/Enumerable/properties/selectors.json":66,"./resources/zh-hans/apis/IEnumerable.json":67,"./resources/zh-hans/apis/IEnumerable/meta.json":68,"./resources/zh-hans/apis/IEnumerable/methods/aggregate.json":69,"./resources/zh-hans/apis/IEnumerable/methods/all.json":70,"./resources/zh-hans/apis/IEnumerable/methods/any.json":71,"./resources/zh-hans/apis/IEnumerable/methods/asEnumerable.json":72,"./resources/zh-hans/apis/IEnumerable/methods/average.json":73,"./resources/zh-hans/apis/IEnumerable/methods/concat.json":74,"./resources/zh-hans/apis/IEnumerable/methods/contains.json":75,"./resources/zh-hans/apis/IEnumerable/methods/count.json":76,"./resources/zh-hans/apis/IEnumerable/methods/defaultIfEmpty.json":77,"./resources/zh-hans/apis/IEnumerable/methods/distinct.json":78,"./resources/zh-hans/apis/IEnumerable/methods/elementAt.json":79,"./resources/zh-hans/apis/IEnumerable/methods/elementAtOrDefault.json":80,"./resources/zh-hans/apis/IEnumerable/methods/except.json":81,"./resources/zh-hans/apis/IEnumerable/methods/first.json":82,"./resources/zh-hans/apis/IEnumerable/methods/firstOrDefault.json":83,"./resources/zh-hans/apis/IEnumerable/properties/length.json":84,"./resources/zh-hans/apis/IEnumerable/properties/size.json":85,"./resources/zh-hans/caption.json":86,"./resources/zh-hans/directory.json":87,"./resources/zh-hans/install.json":88,"./resources/zh-hans/introduction.json":89,"./resources/zh-hans/meta.json":90};r.keys=function(){return Object.keys(a)},r.resolve=t,e.exports=r,r.id=51},function(e,s){e.exports={title:"Class Enumerable",constructors:[{description:"Create an object of type IEnumerable from source"}],properties:[{name:"config",description:"Global config"},{name:"selectors",description:"An object contains same useful selectors"},{name:"predicates",description:"An object contains same useful predicates"},{name:"comparers",description:"An object contains same useful comparers"}],methods:[{name:"asEnumerable",overloads:[{description:"Create an object of type IEnumerable from source"}]}]}},function(e,s){e.exports={class:"class",constructor:"constructor",constructors:"constructors",property:"property",properties:"properties",method:"method",methods:"methods",since:"since",deprecated:"deprecated",details:"details",description:"description",summary:"summary",warning:"warning",warnings:"warnings",remark:"remark",remarks:"remarks",example:"example",examples:"examples",static:"static",see:"see",declare:"declare",parameters:"parameters",parameter:"parameter",returns:"returns",newInstance:{only:"can only use new operator",both:"can use new operator or not",cannot:"can not use new operator"}}},function(e,s){e.exports=[{code:"introduction",title:"Introduction"},{code:"install",title:"Install"},{code:"guide",title:"Guide",children:[{code:"instance",title:"Get IEnumerable instance"}]},{code:"apis",title:"APIs",children:[{code:"Enumerable",title:"Class Enumerable"},{code:"IEnumerable",title:"Interface IEnumerable"},{code:"IOrderedEnumerable",title:"Interface IOrderedEnumerable "}]}]},function(e,s){e.exports={title:"Install"}},function(e,s){e.exports={title:"Introduction",contents:["use linq and lambda in javascript for es6"]}},function(e,s){e.exports={name:"English"}},function(e,s){e.exports={}},function(e,s){e.exports={"1.js":'let fruits = [ "apple", "mango", "orange", "passionfruit", "grape" ];\r\n\r\n// Determine whether any string in the array is longer than "banana".\r\nlet longestName =\r\n\tfruits.asEnumerable().aggregate("banana",\r\n\t\t(longest, next) =>\r\n\t\t\tnext.length > longest.length ? next : longest,\r\n\t\t// Return the final result as an upper case string.\r\n\t\tfruit => fruit.toUpperCase());\r\n\r\nconsole.log(`The fruit with the longest name is ${ longestName }`);\r\n\r\n// This code produces the following output:\r\n//\r\n// The fruit with the longest name is PASSIONFRUIT.'}},function(e,s){e.exports={type:"class",extends:[],implements:[],constructors:[{parameters:[{name:"source",types:["any"]}],since:"2.1.15",returns:"IEnumerable",newInstance:"cannot",description:"通过指定的 source 创建一个 IEnumerable 对象",sees:[{apis:"Enumerable",method:"asEnumerable"}]}],name:"Enumerable",properties:[{name:"comparers",static:!0,description:"一个包含了一些常用比较器的对象"},{name:"config",static:!0,description:"全局配置"},{name:"predicates",static:!0,description:"一个包含了一些常用筛选器的对象"},{name:"selectors",static:!0,description:"一个包含了一些常用选择器的对象"}],methods:[{name:"asEnumerable",overloads:[{static:!0,description:"通过指定的 source 创建一个 IEnumerable 对象",parameters:[{name:"source"}]}]}]}},function(e,s){e.exports={type:"class",extends:[],implements:[],constructors:[{parameters:[{name:"source",types:["any"]}],since:"2.1.15",returns:"IEnumerable",newInstance:"cannot",description:"通过指定的 source 创建一个 IEnumerable 对象",sees:[{apis:"Enumerable",method:"asEnumerable"}]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",static:!0,parameters:[{name:"source",types:["any"]}],returns:{type:"IEnumerable"},description:"通过指定的 source 创建一个 IEnumerable 对象",remarks:["其中 source 可以是 IEnumerable, Iterator, array, string 甚至 object 对象, 不建议使用 boolean, number 对象"]}]}},function(e,s){e.exports={type:"object",static:!0,since:"2.1.15",description:"一个包含了一些常用比较器的对象"}},function(e,s){e.exports={type:"object",static:!0,since:"2.1.15",description:"全局配置"}},function(e,s){e.exports={type:"object",static:!0,since:"2.1.15",description:"一个包含了一些常用筛选器的对象"}},function(e,s){e.exports={type:"object",static:!0,since:"2.1.15",description:"一个包含了一些常用选择器的对象"}},function(e,s){e.exports={type:"interface",extends:["Array"],implements:[],name:"IEnumerable",properties:[{name:"length",description:"所包含的元素个数"},{name:"size",description:"所包含的元素个数"}],methods:[{name:"aggregate",overloads:[{description:"对一个序列应用累加器函数. 将指定的种子值用作累加器的初始值, 并使用指定的函数选择结果值.",parameters:[{name:"seed"},{name:"func"},{name:"resultSelector"}]}]},{name:"all",overloads:[{description:"确定是否对序列中的所有元素都满足条件",parameters:[{name:"predicate"}]}]},{name:"any",overloads:[{description:"确定序列中是否存在满足条件的元素",parameters:[{name:"predicate"}]}]},{name:"asEnumerable",overloads:[{description:"获取一个 IEnumerable 对象",parameters:[]}]},{name:"average",overloads:[{description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的平均值",parameters:[{name:"selector"}]}]},{name:"concat",overloads:[{description:"连接两个序列",parameters:[{name:"other"}]}]},{name:"contains",overloads:[{description:"确定使用指定的相等比较器时, 序列是否包含指定的元素",parameters:[{name:"value"},{name:"comparer"}]}]},{name:"count",overloads:[{description:"返回一个数字来表示多少个元素指定序列中的满足条件",parameters:[{name:"predicate"}]}]},{name:"defaultIfEmpty",overloads:[{description:"如果源序列为空, 返回包含单一元素的新序列, 否则返回源序列",parameters:[{name:"defaultValue"}]}]},{name:"distinct",overloads:[{description:"获取包含源序列中所有非重复元素的新序列",parameters:[{name:"comparer"}]}]},{name:"elementAt",overloads:[{description:"返回序列中的指定索引处的元素",parameters:[{name:"index"}]}]},{name:"elementAtOrDefault",overloads:[{description:"返回序列中的指定索引处的元素, 如果索引超出范围, 则返回默认值",parameters:[{name:"defaultValue"},{name:"index"}]}]},{name:"except",overloads:[{description:"生成两个序列的差集",parameters:[{name:"other"},{name:"comparer"}]}]},{name:"first",overloads:[{description:"返回序列中满足指定条件的第一个元素",parameters:[{name:"predicate"}]}]},{name:"firstOrDefault",overloads:[{description:"返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值",parameters:[{name:"defaultValue"},{name:"predicate"}]}]}]}},function(e,s){e.exports={type:"interface",extends:["Array"],implements:[]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"seed",types:["any"],descriptions:["累加器的初始值"]},{name:"func",types:["function"],descriptions:["要对每个元素调用的累加器函数"],declare:{returns:{type:"any"},parameters:[{name:"seed",types:["any"]},{name:"element",types:["any"]},{name:"index",types:["number"]}]}},{name:"resultSelector",types:["function","string","symbol","number"],defaultValue:"defaultSelector",descriptions:["将累加器的最终值转换为结果值的函数"],declare:{returns:{type:"any"},parameters:[{name:"result",types:["any"]}]}}],returns:{type:"any",descriptions:["已转换的累加器最终值"]},description:"对一个序列应用累加器函数. 将指定的种子值用作累加器的初始值, 并使用指定的函数选择结果值.",remarks:["此方法可以很容易地通过一系列值执行计算. 此方法的原理是使用 source 中的每一个元素依次调用一次 func, 每次 func 调用时此方法将传递聚合的值(作为第一个参数传递给 func)与该序列中的元素. 参数 seed 的值作为聚合的初始值来使用. func 执行的结果替换之前的聚合的值. 最后一次 func 执行的结果传递给 resultSelector 得到此方法要获取的最终结果。"],sees:[{apis:"IEnumerable",method:"count"},{apis:"IEnumerable",method:"min"},{apis:"IEnumerable",method:"max"},{apis:"IEnumerable",method:"sum"},{apis:"IEnumerable",method:"average"}],examples:[{description:"下面的代码示例演示如何使用 aggregate 应用累加器函数和结果选择器",script:{type:"javascript",href:"1.js"}}]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"boolean",descriptions:["如果源序列中的每一个元素都在指定筛选器的检测中返回true或者序列为空,则返回true,否则返回false"]},description:"确定是否对序列中的所有元素都满足条件",remarks:["在循环过程中, 当可以确定的结果时, 循环就会立即停止。"],warnings:["此方法不会返回序列中任何元素, 它只会确认集合中的所有元素是否满足条件"]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"boolean",descriptions:["如果源序列中的有任何元素能在指定筛选器的检测中返回true或者序列为空,则返回true,否则返回false"]},description:"确定序列中是否存在满足条件的元素",remarks:["在循环过程中, 当可以确定的结果时, 循环就会立即停止。"],warnings:["此方法不会返回序列中任何元素, 它只会确认集合中是否存在满足条件的元素"]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[],returns:{type:"IEnumerable",descriptions:["一个 IEnumerable 对象"]},description:"获取一个 IEnumerable 对象",remarks:["因为本身已经是 IEnumerable 对象, 所以此方法将返回对象本身"]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"selector",types:["function","string","symbol","number"],descriptions:["应用于每个元素的转换函数"],defaultValue:"defaultSelector",declare:{returns:{type:"number"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"number",descriptions:["值序列的平均值"]},description:"计算通过对序列中的每个元素调用转换函数获得的新的值序列的平均值"}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"other",types:["IEnumerable","Iterator","array","object","string"],descriptions:["要与源序列连接的另一个序列"]}],returns:{type:"IEnumerable",descriptions:["一个将两个序列所有元素的串联产生的新序列"]},description:"连接两个序列",remarks:["此方法通过延迟执行的方式实现","此方法不用 union 方法因为此方法返回输入序列中的所有原始元素, 而 union 方法只返回唯一元素"],sees:[{apis:"IEnumerable",method:"union"}]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"value",types:["any"],descriptions:["要在序列中定位的值"]},{name:"comparer",types:["function","string","symbol","number"],descriptions:["一个对值进行比较的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"boolean",descriptions:["如果源序列包含具有指定的值的元素, 则返回true, 否则返回false"]},description:"确定使用指定的相等比较器时, 序列是否包含指定的元素",remarks:["只要找到匹配的元素, 将停止循环比较的过程"]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"number",descriptions:["一个数字，表示序列中满足函数条件的元素数量"]},description:"返回一个数字来表示多少个元素指定序列中的满足条件"}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"defaultValue",types:["any"],descriptions:["序列为空时要返回的序列所包含的值"]}],returns:{type:"IEnumerable",descriptions:["如果源序列为空, 返回包含单一 defaultValue 元素的新序列, 否则返回源序列"]},description:"如果源序列为空, 返回包含单一元素的新序列, 否则返回源序列",remarks:["此方法通过延迟执行的方式实现","此方法可以用于与 groupJoin 方法结合使用, 生成一个左外部联接"],sees:[{apis:"IEnumerable",method:"groupJoin"}]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于对值进行比较的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"IEnumerable",descriptions:["包含源序列中所有非重复元素的结果序列"]},description:"获取包含源序列中所有非重复元素的新序列",remarks:["此方法通过延迟执行的方式实现"],warnings:["此方法的结果可能是无序的"]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"index",types:["number"],descriptions:["要检索的从零开始的元素索引"]}],returns:{type:"any",descriptions:["源序列中指定位置处的元素"]},description:"返回序列中的指定索引处的元素",remarks:["如果 index 超出范围, 此方法将引发异常. 如果希望 index 超出范围时返回默认值, 请使用 elementAtOrDefault 方法"],sees:[{apis:"IEnumerable",method:"elementAtOrDefault"}]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"defaultValue",types:["any"],descriptions:["如果 index 超出范围时返回的默认值"]},{name:"index",types:["number"],descriptions:["要检索的从零开始的元素索引"]}],returns:{type:"any",descriptions:["如果索引超出源序列中的界限返回 defaultValue, 否则返回源序列中的指定位置处的元素"]},description:"返回序列中的指定索引处的元素, 如果索引超出范围, 则返回默认值",sees:[{apis:"IEnumerable",method:"elementAt"}]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"other",types:["IEnumerable","Iterator","array","object","string"],descriptions:["需要在返回序列中移除存在于源序列中的元素序列"]},{name:"comparer",types:["function","string","symbol","number"],descriptions:["用于判定两个序列元素的值是否相等的相等比较器"],defaultValue:"defaultEqualityComparer",declare:{parameters:[{name:"element",types:["any"]},{name:"other",types:["any"]}],returns:{type:"boolean"}}}],returns:{type:"IEnumerable",descriptions:["包含这两个序列的元素的差集的序列"]},description:"生成两个序列的差集",remarks:["此方法通过延迟执行的方式实现"],sees:[{apis:"IEnumerable",method:"union"},{apis:"IEnumerable",method:"intersect"}]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"any",descriptions:["序列中通过指定函数检测的第一个元素"]},description:"返回序列中满足指定条件的第一个元素",remarks:["如果在源序列中找不到任何匹配的元素, 则会引发异常. 如果希望在找不到任何元素时返回默认值, 请使用 firstOrDefault 方法"],sees:[{apis:"IEnumerable",method:"firstOrDefault"}]}]}},function(e,s){e.exports={overloads:[{since:"2.1.15",parameters:[{name:"defaultValue",types:["any"],descriptions:["找不到匹配元素时返回的默认值"]},{name:"predicate",types:["function","string","symbol","number"],descriptions:["用于检测每个元素是否满足条件的函数"],defaultValue:"defaultPredicate",declare:{returns:{type:"boolean"},parameters:[{name:"element",types:["any"]},{name:"index",types:["number"]}]}}],returns:{type:"any",descriptions:["序列中通过指定函数检测的第一个元素, 如果未找到匹配元素, 则返回 defaultValue"]},description:"返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值",sees:[{apis:"IEnumerable",method:"first"}]}]}},function(e,s){e.exports={type:"number",since:"2.1.15",description:"所包含的元素个数",sees:[{apis:"IEnumerable",property:"size"}]}},function(e,s){e.exports={name:"size",type:"number",since:"2.1.15",description:"所包含的元素个数",sees:[{apis:"IEnumerable",property:"length"}]}},function(e,s){e.exports={class:"类",constructor:"构造方法",constructors:"构造方法",property:"属性",properties:"属性",method:"方法",methods:"方法",since:"最低版本",deprecated:"最高版本",details:"详情",description:"描述",summary:"摘要",warning:"注意",warnings:"注意",remark:"备注",remarks:"备注",example:"示例",examples:"示例",static:"静态的",see:"参考",declare:"声明",parameters:"参数",parameter:"参数",returns:"返回值",newInstance:{only:"只能使用new运算符",both:"可以使用new运算符,也可以直接调用",cannot:"不能使用new运算符"}}},function(e,s){e.exports=[{code:"introduction",title:"简介"},{code:"install",title:"安装"},{code:"guide",title:"教程",children:[{code:"instance",title:"获取IEnumerable实例"},{code:"selectors",title:"选择器"},{code:"comparers",title:"比较器"},{code:"predicates",title:"筛选器"}]},{code:"apis",title:"API文档",children:[{code:"Enumerable",title:"Enumerable 类"},{code:"IEnumerable",title:"IEnumerable 接口"},{code:"IOrderedEnumerable",title:"IOrderedEnumerable 接口"}]}]},function(e,s){e.exports={icon:"",code:"install",title:"安装",contents:[{code:"addIn",title:"添加至项目",details:[{type:"example",runtime:"Node JS",scripts:[{type:"bash",script:"$ npm install --save linq-js"}]},{type:"example",runtime:"Bower",scripts:[{type:"bash",script:"$ bower install js-linq"}]}]},{code:"require",title:"引入",details:[{type:"example",scripts:[{type:"javascript",script:"const Enumerable = require('linq-js');"}],remarks:["说明:本module依赖于ES6,建议项目在中使用ES6,以下案例中将均使用ES6写法"]}]}]}},function(e,s){e.exports={code:"introduction",title:"简介",contents:["在javascript(ES6标准)中使用linq与lambda","&nbsp;","在1.0.0中使用了字符串的lambda表达式,过于繁琐,并且不支持延迟操作","从2.1.0开始整体代码重新编写,使用全新的ES6的特性,性能更好,同时对数据的操作是延时操作,占用更少"]}},function(e,s){e.exports={name:"中文版"}}]);
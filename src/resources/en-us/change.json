[
	{
		"publish": "2017-03-27",
		"contents": [
			"优化了部分代码结构",
			"新增 对 arrayComparer 的默认支持",
			"新增了 对绝大部分 selector, predicate, comparer 参数校验",
			"新增 绝大部分的 selector, predicate, comparer 参数均支持 String 或 Symbol 类型数据 表示选择对象对应的字段 的功能",
			"新增 Enumerable.predicates.exists 属性, 表示非空筛选器",
			"新增 Enumerable.predicates.regexp 方法, 生成正则匹配的筛选器",
			"新增 Enumerable.predicates.not 方法, 生成逻辑非筛选器",
			"新增 Enumerable.predicates.selector 方法, 生成选择筛选器",
			"新增 Enumerable.predicates.equality, Enumerable.predicates.strict, Enumerable.predicates.same 方法, 生成比较筛选器"
		],
		"version": "2.1.15"
	},
	{
		"publish": "2017-04-05",
		"contents": [
			"优化 selectMany 方法, 使的使用上更接近linq原生的方法. 修复 selectMany 方法 collectionSelector 返回 Iterator,string,object 对象是出现异常的bug",
			"修改 defaultGroupResultSelector 为 defaultResultSelector, 修改 Enumerable.selectors.groupResult 为 Enumerable.selectors.result",
			"修改 selectMany 方法的 resultSelector 参数的结构和默认值, 与 defaultResultSelector 一致",
			"增加 zip 方法的 resultSelector 的默认值为 defaultResultSelector"
		],
		"version": "2.1.16"
	},
	{
		"publish": "2017-04-12",
		"contents": [
			"新增 findLast 方法",
			"新增 Enumerable.comparers.greater 方法",
			"新增 Enumerable.comparers.less 方法",
			"新增 Enumerable.predicates.properties 方法, 生成一个属性筛选器",
			"新增所有的 predicate 参数, 如果使用 Array 或者 Object 类型作为参数时, 自动经过 Enumerable.predicates.properties 方法转译成一个筛选器",
			"优化 comparer / predicate / selector 类型的参数 转化过程的效率"
		],
		"version": "2.1.17"
	},
	{
		"publish": "2017-08-30",
		"contents": [
			"新增 Enumerable.typeAs 方法用来对指定类型设置 asEnumerable 转换时的参考类型",
			"新增 Enumerable.types 对象,包含各参考类型的常量值",
			"Enumerable.addPlugins、Enumerable.removePlugins 方法增加返回值,方便链式调用",
			"新增 Enumerable.comparers.ignoreCase 忽略大小写的相等比较器",
			"新增 IEnumerable.prototype.leftJoin、IEnumerable.prototype.rightJoin 方法用来对两个序列分别进行内部左联接与内部右联接",
			"修复 concat 方法在参数值为 String 或 Arguments 类型是结果超出预期的bug",
			"移除过时的功能 arrayComparer、predicateComparer",
			"新增 Enumerable.extends.lazy 配置选项",
			"修复 启用扩展后 对象上不能使用 getEnumerator 方法的问题",
			"新增 IEnumerable.prototype.chunk 方法用来对序列进行分块",
			"新增 IEnumerable.prototype.product 方法用来计算乘积",
			"新增 IEnumerable.prototype.leftPad、IEnumerable.prototype.rightPad 方法",
			"新增 IEnumerable.prototype.rand 方法"
		],
		"version": "2.1.18"
	},
	{
		"prepublish": true,
		"contents": [
			"新增(New):",
			"1. 增加各 选择器(Selector)/比较器(Comparer)/筛选器(Predicate) 对 Number/Symbol 类型参数的支持",
			"2. 新增 Enumerable.selectors.join 作为 defaultJoinSelector",
			"3. 新增 IEnumerable.prototype.innerJoin 方法与原先的 join 方法功能一致, 主要为了区别仅有一个参数的情况下的逻辑",
			"4. 新增 Enumerable.noConflict 方法 用于解决重复引用的问题",
			"&nbsp",
			"优化(Optimization):",
			"1. 优化了 join 方法的处理逻辑",
			"2. 将 IGrouping.prototype.key 与 IChunk.prototype.index 设置成只读",
			"3. 为 groupJoin, leftJoin, rightJoin 等方法的 resultSelector 参数设置了 defaultJoinSelector 默认值",
			"&nbsp",
			"修复(Fixed):",
			"1. 修复一处针对 String 扩展后 String.prototype.slice 返回超出预期的问题",
			"2. 修复由 groupBy/groupJoin/chunk 等方法获取到的 IGrouping/IChunk 对象不能被重复遍历的问题",
			"3. 修复对 Object 对象使用 asEnumerable 方法时不能返回此对象键值对序列或出现错误的bug"
		],
		"version": "2.1.19.pre"
	}
]
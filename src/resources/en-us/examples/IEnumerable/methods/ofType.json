{
	"1-2.1.19.js": "let fruits = [\"Mango\", \"Orange\", \"Apple\", 3.0, \"Banana\"];\r\n\r\n// Apply ofType() to the Array\r\nlet query1 = fruits.asEnumerable().ofType(String);\r\n\r\nconsole.log(\"Elements of type 'String' are:\");\r\nfor (let fruit of query1) {\r\n    console.log(fruit);\r\n}\r\n\r\n// The following query shows that the standard query operators such as\r\n// where() can be applied to the Array type after calling ofType().\r\nlet query2 = fruits.asEnumerable().ofType(String).where(fruit => fruit.asEnumerable().contains(\"n\", Enumerable.comparers.ignoreCase()));\r\n\r\nconsole.log(\"\\nThe following strings contain 'n':\");\r\nfor (let fruit of query2) {\r\n    console.log(fruit);\r\n}\r\n\r\n// This code produces the following output:\r\n//\r\n// Elements of type 'string' are:\r\n// Mango\r\n// Orange\r\n// Apple\r\n// Banana\r\n//\r\n// The following strings contain 'n':\r\n// Mango\r\n// Orange\r\n// Banana",
	"1.js": "let fruits = [\"Mango\", \"Orange\", \"Apple\", 3.0, \"Banana\"];\r\n\r\n// Apply ofType() to the Array\r\nlet query1 = fruits.asEnumerable().ofType(String);\r\n\r\nconsole.log(\"Elements of type 'String' are:\");\r\nfor (let fruit of query1) {\r\n    console.log(fruit);\r\n}\r\n\r\n// The following query shows that the standard query operators such as\r\n// where() can be applied to the Array type after calling ofType().\r\nlet query2 = fruits.asEnumerable().ofType(String).where(fruit => fruit.toLowerCase().asEnumerable().contains(\"n\"));\r\n\r\nconsole.log(\"\\nThe following strings contain 'n':\");\r\nfor (let fruit of query2) {\r\n    console.log(fruit);\r\n}\r\n\r\n// This code produces the following output:\r\n//\r\n// Elements of type 'string' are:\r\n// Mango\r\n// Orange\r\n// Apple\r\n// Banana\r\n//\r\n// The following strings contain 'n':\r\n// Mango\r\n// Orange\r\n// Banana"
}
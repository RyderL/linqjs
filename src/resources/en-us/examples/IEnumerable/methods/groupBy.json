{
	"1.js": "// Create a list of pets.\r\nlet pets = [\r\n    { name: \"Barley\", age: 8 },\r\n    { name: \"Boots\", age: 4 },\r\n    { name: \"Whiskers\", age: 1 },\r\n    { name: \"Daisy\", age: 4 }\r\n];\r\n\r\n// Group the pets using Age as the key value\r\n// and selecting only the pet's Name for each value.\r\nlet query = pets.asEnumerable().groupBy(pet => pet.age, pet => pet.name);\r\n\r\n// Iterate over each IGrouping in the collection.\r\nfor (let petGroup of query) {\r\n    // Print the key value of the IGrouping.\r\n    console.log(petGroup.key);\r\n    // Iterate over each value in the\r\n    // IGrouping and print the value.\r\n    for (let name of petGroup)\r\n        console.log(`  ${ name }`);\r\n}\r\n\r\n/*\r\n This code produces the following output:\r\n\r\n 8\r\n   Barley\r\n 4\r\n   Boots\r\n   Daisy\r\n 1\r\n   Whiskers\r\n */",
	"2.2.1.19.js": "// Create a list of pets.\r\nlet petsList = [\r\n    { name: \"Barley\", age: 8.3 },\r\n    { name: \"Boots\", age: 4.9 },\r\n    { name: \"Whiskers\", age: 1.5 },\r\n    { name: \"Daisy\", age: 4.3 }\r\n];\r\n\r\n// Group Pet objects by the Math.Floor of their age.\r\n// Then project an anonymous type from each group\r\n// that consists of the key, the count of the group's\r\n// elements, and the minimum and maximum age in the group.\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet,\r\n    (age, pets) => ({\r\n        key: age,\r\n        count: pets.count(),\r\n        min: pets.min(pet => pet.age),\r\n        max: pets.max(pet => pet.age)\r\n    }));\r\n\r\n// Iterate over each anonymous type.\r\nfor (let result of query) {\r\n    console.log(\"\\nAge group: \" + result.key);\r\n    console.log(\"Number of pets in this age group: \" + result.count);\r\n    console.log(\"Minimum age: \" + result.min);\r\n    console.log(\"Maximum age: \" + result.max);\r\n}\r\n\r\n/*  This code produces the following output:\r\n\r\n Age group: 8\r\n Number of pets in this age group: 1\r\n Minimum age: 8.3\r\n Maximum age: 8.3\r\n\r\n Age group: 4\r\n Number of pets in this age group: 2\r\n Minimum age: 4.3\r\n Maximum age: 4.9\r\n\r\n Age group: 1\r\n Number of pets in this age group: 1\r\n Minimum age: 1.5\r\n Maximum age: 1.5\r\n */",
	"2.js": "// Create a list of pets.\r\nlet petsList = [\r\n    { name: \"Barley\", age: 8.3 },\r\n    { name: \"Boots\", age: 4.9 },\r\n    { name: \"Whiskers\", age: 1.5 },\r\n    { name: \"Daisy\", age: 4.3 }\r\n];\r\n\r\n// Group Pet objects by the Math.Floor of their age.\r\n// Then project an anonymous type from each group\r\n// that consists of the key, the count of the group's elements.\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet,\r\n    (age, pets) => ({\r\n        key: age,\r\n        count: pets.count()\r\n    }));\r\n\r\n// Iterate over each anonymous type.\r\nfor (let result of query) {\r\n    console.log(\"\\nAge group: \" + result.key);\r\n    console.log(\"Number of pets in this age group: \" + result.count);\r\n}\r\n\r\n/*  This code produces the following output:\r\n\r\n Age group: 8\r\n Number of pets in this age group: 1\r\n\r\n Age group: 4\r\n Number of pets in this age group: 2\r\n\r\n Age group: 1\r\n Number of pets in this age group: 1\r\n */",
	"3.2.1.19.js": "// Create a list of pets.\r\nlet petsList = [\r\n    { name: \"Barley\", age: 8.3 },\r\n    { name: \"Boots\", age: 4.9 },\r\n    { name: \"Whiskers\", age: 1.5 },\r\n    { name: \"Daisy\", age: 4.3 }\r\n];\r\n\r\n// Group Pet objects by the Math.Floor of their age.\r\n// Then project an anonymous type from each group\r\n// that consists of the key, the count of the group's\r\n// elements, and the minimum and maximum age in the group.\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet.age,\r\n    (age, ages) => ({\r\n        key: age,\r\n        count: ages.count(),\r\n        min: ages.min(),\r\n        max: ages.max()\r\n    }));\r\n\r\n// Iterate over each anonymous type.\r\nfor (let result of query) {\r\n    console.log(\"\\nAge group: \" + result.key);\r\n    console.log(\"Number of pets in this age group: \" + result.count);\r\n    console.log(\"Minimum age: \" + result.min);\r\n    console.log(\"Maximum age: \" + result.max);\r\n}\r\n\r\n/*  This code produces the following output:\r\n\r\n Age group: 8\r\n Number of pets in this age group: 1\r\n Minimum age: 8.3\r\n Maximum age: 8.3\r\n\r\n Age group: 4\r\n Number of pets in this age group: 2\r\n Minimum age: 4.3\r\n Maximum age: 4.9\r\n\r\n Age group: 1\r\n Number of pets in this age group: 1\r\n Minimum age: 1.5\r\n Maximum age: 1.5\r\n */",
	"3.js": "// Create a list of pets.\r\nlet petsList = [\r\n    { name: \"Barley\", age: 8.3 },\r\n    { name: \"Boots\", age: 4.9 },\r\n    { name: \"Whiskers\", age: 1.5 },\r\n    { name: \"Daisy\", age: 4.3 }\r\n];\r\n\r\n// Group Pet objects by the Math.Floor of their age.\r\n// Then project an anonymous type from each group\r\n// that consists of the key, the count of the group's\r\n// elements, and the minimum and maximum age in the group.\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet.age,\r\n    (age, ages) => ({\r\n        key: age,\r\n        count: ages.count()\r\n    }));\r\n\r\n// Iterate over each anonymous type.\r\nfor (let result of query) {\r\n    console.log(\"\\nAge group: \" + result.key);\r\n    console.log(\"Number of pets in this age group: \" + result.count)\r\n}\r\n\r\n/*  This code produces the following output:\r\n\r\n Age group: 8\r\n Number of pets in this age group: 1\r\n\r\n Age group: 4\r\n Number of pets in this age group: 2\r\n\r\n Age group: 1\r\n Number of pets in this age group: 1\r\n */"
}
{
	"type": "interface",
	"since": "2.1.22",
	"extends": [
		"IEnumerable"
	],
	"name": "ITree",
	"properties": [
		{
			"name": "children",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"description": "包含当前节点所有子节点的集合",
					"readonly": true
				}
			]
		},
		{
			"name": "value",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"description": "当前节点的值",
					"readonly": true
				}
			]
		},
		{
			"name": "values",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"description": "包含当前节点所有子节点值的集合",
					"readonly": true
				}
			]
		}
	],
	"methods": [
		{
			"name": "asBinary",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "将一个满足二叉树结构的树形结构转化为一个二叉树",
							"parameters": []
						}
					]
				}
			]
		},
		{
			"name": "breadthSearch",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "通过广度优先遍历算法查找树形结构,找到满足条件的元素",
							"parameters": [
								{
									"name": "predicate"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "breadthSubTree",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "通过广度优先遍历算法遍历树形结构,获取所有满足条件的子树组成的序列",
							"parameters": [
								{
									"name": "predicate"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "breadthTraverse",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "通过广度优先遍历算法遍历树形结构,将其展开得到新的值序列",
							"parameters": []
						}
					]
				}
			]
		},
		{
			"name": "degree",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "获取节点的度(子节点数),只计算满足条件的子节点",
							"parameters": [
								{
									"name": "predicate"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "depth",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "获取树的深度,只计算符合条件的子孙节点",
							"parameters": [
								{
									"name": "predicate"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "depthSearch",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "通过深度优先遍历算法查找树形结构,找到满足条件的元素",
							"parameters": [
								{
									"name": "predicate"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "depthSubTree",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "通过深度优先遍历算法遍历树形结构,获取所有满足条件的子树组成的序列",
							"parameters": [
								{
									"name": "predicate"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "depthTraverse",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "通过深度优先遍历算法遍历树形结构,将其展开得到新的值序列",
							"parameters": []
						}
					]
				}
			]
		},
		{
			"name": "getChild",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "返回当前节点所有子节点的指定索引处的节点",
							"parameters": [
								{
									"name": "index"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getValue",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "返回当前节点所有子节点的指定索引处的节点值",
							"parameters": [
								{
									"name": "index"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "isAncestorOf",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "判断一个节点是否是另一个节点的祖先节点",
							"parameters": [
								{
									"name": "node"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "isBinary",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "判断树形结构是否是二叉树，即所有的节点的度(子节点数)不超过2",
							"parameters": []
						}
					]
				}
			]
		},
		{
			"name": "isCompleteBinary",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "判断树形结构是否是完全二叉树。若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边",
							"parameters": []
						}
					]
				}
			]
		},
		{
			"name": "isDescendantOf",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "判断一个节点是否是另一个节点的子孙节点",
							"parameters": [
								{
									"name": "root"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "isFullBinary",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "判断树形结构是否是满二叉树，即所有的节点的度(子节点数)为0或者为2",
							"parameters": []
						}
					]
				}
			]
		},
		{
			"name": "isPerfectBinary",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "判断树形结构是否是完美二叉树，即一个每一个层的结点数都达到最大值的二叉树",
							"parameters": []
						}
					]
				}
			]
		},
		{
			"name": "lowestAncestor",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "在树形结构中查找所有指定节点的最小公共祖先节点",
							"parameters": [
								{
									"name": "tree"
								},
								{
									"name": "trees"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "path",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "获取从祖先节点到当前节点路径上所有的节点值序列",
							"parameters": [
								{
									"name": "root"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "pathTo",
			"histroys": [
				{
					"since": "2.1.22",
					"deprecated": 0,
					"overloads": [
						{
							"description": "获取从当前节点到子孙节点路径上所有的节点值序列",
							"parameters": [
								{
									"name": "root"
								}
							]
						}
					]
				}
			]
		}
	]
}
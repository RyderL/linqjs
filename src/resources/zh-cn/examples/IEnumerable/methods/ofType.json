{
	"1-2.1.19.js": "let fruits = [\"芒果\", \"橘子\", \"苹果\", 3.0, \"香蕉\"];\r\n\r\n// 对序列执行 ofType 方法\r\nlet query1 = fruits.asEnumerable().ofType(String);\r\n\r\nconsole.log(\"元素是 String 类型的有：\");\r\nfor (let fruit of query1) {\r\n    console.log(fruit);\r\n}\r\n\r\n// 以下的查询展示了在 ofType 方法调用后使用 where 方法\r\nlet query2 = fruits.asEnumerable().ofType(String).where(fruit => fruit.asEnumerable().contains(\"果\", Enumerable.comparers.ignoreCase()));\r\n\r\nconsole.log(\"\\n下列字符串包含 “果”：\");\r\nfor (let fruit of query2) {\r\n    console.log(fruit);\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 元素是 String 类型的有：\r\n// 芒果\r\n// 橘子\r\n// 苹果\r\n// 香蕉\r\n//\r\n// 下列字符串包含 “果”：\r\n// 芒果\r\n// 苹果",
	"1.js": "let fruits = [\"芒果\", \"橘子\", \"苹果\", 3.0, \"香蕉\"];\r\n\r\n// 对序列执行 ofType 方法\r\nlet query1 = fruits.asEnumerable().ofType(String);\r\n\r\nconsole.log(\"元素是 String 类型的有：\");\r\nfor (let fruit of query1) {\r\n    console.log(fruit);\r\n}\r\n\r\n// 以下的查询展示了在 ofType 方法调用后使用 where 方法\r\nlet query2 = fruits.asEnumerable().ofType(String).where(fruit => fruit.toLowerCase().asEnumerable().contains(\"果\"));\r\n\r\nconsole.log(\"\\n下列字符串包含 “果”：\");\r\nfor (let fruit of query2) {\r\n    console.log(fruit);\r\n}\r\n\r\n// 这段代码的输出结果如下：\r\n//\r\n// 元素是 String 类型的有：\r\n// 芒果\r\n// 橘子\r\n// 苹果\r\n// 香蕉\r\n//\r\n// 下列字符串包含 “果”：\r\n// 芒果\r\n// 苹果"
}
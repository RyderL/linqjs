{
	"1.js": "// 创建一个宠物的序列。\r\nlet pets = [\r\n    { name: \"小白\", age: 8 },\r\n    { name: \"机器人\", age: 4 },\r\n    { name: \"旺财\", age: 1 },\r\n    { name: \"小黑\", age: 4 }\r\n];\r\n\r\n// 使用年龄作为分组的键同时\r\n// 使用宠物的名字作为每个分组中的元素。\r\nlet query = pets.asEnumerable().groupBy(pet => pet.age, pet => pet.name);\r\n\r\n// 循环每个组的结果。\r\nfor (let petGroup of query) {\r\n    // 输入该组的键。\r\n    console.log(petGroup.key);\r\n    // 循环每个结果的内容。\r\n    for (let name of petGroup)\r\n        // 输出 IGrouping 中的值。\r\n        console.log(`  ${ name }`);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 8\r\n   小白\r\n 4\r\n   机器人\r\n   小黑\r\n 1\r\n   旺财\r\n */\r\n",
	"2.2.1.19.js": "// 创建一个宠物的序列。\r\nlet petsList = [\r\n    { name: \"小白\", age: 8.3 },\r\n    { name: \"机器人\", age: 4.9 },\r\n    { name: \"旺财\", age: 1.5 },\r\n    { name: \"小黑\", age: 4.3 }\r\n];\r\n\r\n// 按照整数年龄进行分组\r\n// 然后按每个分组生成\r\n// 包含分组的键、数量、最小年龄与最大年龄的新对象。\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet,\r\n    (age, pets) => ({\r\n        key: age,\r\n        count: pets.count(),\r\n        min: pets.min(pet => pet.age),\r\n        max: pets.max(pet => pet.age)\r\n    }));\r\n\r\n// 循环每个组的结果。\r\nfor (let result of query) {\r\n    console.log(\"\\n年龄组：\" + result.key);\r\n    console.log(\"该组包含的宠物数量：\" + result.count);\r\n    console.log(\"该组的最小年龄：\" + result.min);\r\n    console.log(\"该组的最大年龄：\" + result.max);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄组：8\r\n 该组包含的宠物数量：1\r\n 该组的最小年龄：8.3\r\n 该组的最大年龄：8.3\r\n\r\n 年龄组：4\r\n 该组包含的宠物数量：2\r\n 该组的最小年龄：4.3\r\n 该组的最大年龄：4.9\r\n\r\n 年龄组：1\r\n 该组包含的宠物数量：1\r\n 该组的最小年龄：1.5\r\n 该组的最大年龄：1.5\r\n */",
	"2.js": "// 创建一个宠物的序列。\r\nlet petsList = [\r\n    { name: \"小白\", age: 8.3 },\r\n    { name: \"机器人\", age: 4.9 },\r\n    { name: \"旺财\", age: 1.5 },\r\n    { name: \"小黑\", age: 4.3 }\r\n];\r\n\r\n// 按照整数年龄进行分组\r\n// 然后按每个分组生成\r\n// 包含分组的键与数量的新对象。\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet,\r\n    (age, pets) => ({\r\n        key: age,\r\n        count: pets.count()\r\n    }));\r\n\r\n// 循环每个组的结果。\r\nfor (let result of query) {\r\n    console.log(\"\\n年龄组：\" + result.key);\r\n    console.log(\"该组包含的宠物数量：\" + result.count);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄组：8\r\n 该组包含的宠物数量：1\r\n\r\n 年龄组：4\r\n 该组包含的宠物数量：2\r\n\r\n 年龄组：1\r\n 该组包含的宠物数量：1\r\n */",
	"3.2.1.19.js": "// 创建一个宠物的序列。\r\nlet petsList = [\r\n    { name: \"小白\", age: 8.3 },\r\n    { name: \"机器人\", age: 4.9 },\r\n    { name: \"旺财\", age: 1.5 },\r\n    { name: \"小黑\", age: 4.3 }\r\n];\r\n\r\n// 按照整数年龄进行分组\r\n// 然后按每个分组生成\r\n// 包含分组的键、数量、最小年龄与最大年龄的新对象。\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet.age,\r\n    (age, ages) => ({\r\n        key: age,\r\n        count: ages.count(),\r\n        min: ages.min(),\r\n        max: ages.max()\r\n    }));\r\n\r\n// 循环每个组的结果。\r\nfor (let result of query) {\r\n    console.log(\"\\n年龄组：\" + result.key);\r\n    console.log(\"该组包含的宠物数量：\" + result.count);\r\n    console.log(\"该组的最小年龄：\" + result.min);\r\n    console.log(\"该组的最大年龄：\" + result.max);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄组：8\r\n 该组包含的宠物数量：1\r\n 该组的最小年龄：8.3\r\n 该组的最大年龄：8.3\r\n\r\n 年龄组：4\r\n 该组包含的宠物数量：2\r\n 该组的最小年龄：4.3\r\n 该组的最大年龄：4.9\r\n\r\n 年龄组：1\r\n 该组包含的宠物数量：1\r\n 该组的最小年龄：1.5\r\n 该组的最大年龄：1.5\r\n */",
	"3.js": "// 创建一个宠物的序列。\r\nlet petsList = [\r\n    { name: \"小白\", age: 8.3 },\r\n    { name: \"机器人\", age: 4.9 },\r\n    { name: \"旺财\", age: 1.5 },\r\n    { name: \"小黑\", age: 4.3 }\r\n];\r\n\r\n// 按照整数年龄进行分组\r\n// 然后按每个分组生成\r\n// 包含分组的键、数量、最小年龄与最大年龄的新对象。\r\nlet query = petsList.asEnumerable().groupBy(\r\n    pet => Math.floor(pet.age),\r\n    pet => pet.age,\r\n    (age, ages) => ({\r\n        key: age,\r\n        count: ages.count()\r\n    }));\r\n\r\n// 循环每个组的结果。\r\nfor (let result of query) {\r\n    console.log(\"\\n年龄组：\" + result.key);\r\n    console.log(\"该组包含的宠物数量：\" + result.count);\r\n}\r\n\r\n/*\r\n 这段代码的输出结果如下：\r\n\r\n 年龄组：8\r\n 该组包含的宠物数量：1\r\n\r\n 年龄组：4\r\n 该组包含的宠物数量：2\r\n\r\n 年龄组：1\r\n 该组包含的宠物数量：1\r\n */"
}